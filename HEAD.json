{
  "files": [
    {
      "file": "machines/bt_machines.h",
      "meta": {
      },
      "functions": [
        "",
        "",
        "",
        "BT_GetCpuClockFrequency"
      ],
      "lines": 57
    },
    {
      "file": "bt_kernel.h",
      "meta": {
      },
      "functions": [
        "void",
        "BT_kStartScheduler",
        "BT_kStopScheduler",
        "BT_kTaskCreate",
        "BT_kTaskDelete",
        "BT_kTickCount",
        "BT_kTaskDelay",
        "BT_kTaskDelayUntil",
        "BT_kTaskYield",
        "BT_kGetThreadTag",
        "BT_kSetThreadTag",
        "BT_kMutexCreate",
        "BT_kRecursiveMutexCreate",
        "BT_kMutexDestroy",
        "BT_kMutexPend",
        "BT_kMutexRelease",
        "BT_kMutexPendRecursive",
        "BT_kMutexReleaseRecursive",
        "BT_kMutexReleaseFromISR",
        "BT_kQueueCreate",
        "BT_kQueueDestroy",
        "BT_kQueueSend",
        "BT_kQueueSendFromISR",
        "BT_kQueueSendToFront",
        "BT_kQueueSendToBack",
        "BT_kQueueReceive",
        "BT_kQueueReceiveFromISR",
        "BT_kQueueMessagesWaiting",
        "BT_kEnterCritical",
        "BT_kExitCritical",
        "bt_get_kernel_params"
      ],
      "lines": 58
    },
    {
      "file": "bitthunder.lds.h",
      "meta": {
      },
      "functions": [
        "= ALIGN",
        "= ALIGN",
        "= __sdata_start +",
        "= __sdata2_start +",
        "= ALIGN",
        "= ALIGN",
        "= ALIGN",
        "= ALIGN",
        "= ALIGN"
      ],
      "lines": 339
    },
    {
      "file": "process/bt_queue.h",
      "meta": {
      },
      "functions": [
        "BT_CreateQueue",
        "BT_QueueSend",
        "BT_QueueSendFromISR",
        "BT_QueueSendToBack",
        "BT_QueueSendToFront",
        "BT_QueueReceive",
        "BT_QueueReceiveFromISR",
        "BT_QueueMessagesWaiting"
      ],
      "lines": 15
    },
    {
      "file": "process/bt_threads.h",
      "meta": {
      },
      "functions": [
        "BT_ERROR",
        "BT_CreateThread",
        "BT_CreateProcessThread",
        "BT_GetThreadHandle",
        "BT_GetThreadProcessHandle",
        "BT_ThreadSleepUntil",
        "BT_ThreadSleep",
        "BT_ThreadYield",
        "BT_GetThreadTag",
        "BT_SetThreadTag"
      ],
      "lines": 49
    },
    {
      "file": "process/bt_mutex.h",
      "meta": {
      },
      "functions": [
        "BT_CreateMutex",
        "BT_PendMutex",
        "BT_ReleaseMutex",
        "BT_PendMutexRecursive",
        "BT_ReleaseMutexRecursive",
        "BT_ReleaseMutexFromISR"
      ],
      "lines": 21
    },
    {
      "file": "process/bt_process.h",
      "meta": {
      },
      "functions": [
        "BT_CreateProcess",
        "BT_GetProcessHandle",
        "BT_GetKernelProcessHandle",
        "BT_GetParentProcessHandle",
        "bt_task BT_GetProcessTask",
        "BT_GetProcessTime",
        "BT_GetTotalProcesses",
        "BT_AllocFileDescriptor",
        "BT_FreeFileDescriptor",
        "BT_SetFileDescriptor",
        "BT_GetFileDescriptor",
        "BT_SetProcessFileDescriptor",
        "BT_GetProcessFileDescriptor",
        "bt_process_init"
      ],
      "lines": 78
    },
    {
      "file": "bt_time.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 14
    },
    {
      "file": "timers/bt_timers.h",
      "meta": {
      },
      "functions": [
        "BT_SetSystemTimerHandle",
        "BT_SetGlobalTimerHandle",
        "BT_GetSystemTimerOffset",
        "BT_StopSystemTimer",
        "BT_GetGlobalTimer",
        "BT_GetGlobalTimerRate",
        "BT_GetKernelTime",
        "BT_GetKernelTick"
      ],
      "lines": 25
    },
    {
      "file": "mm/bt_vm.h",
      "meta": {
      },
      "functions": [
        "bt_vm_init",
        "bt_vm_map bt_vm_create",
        "bt_vm_destroy",
        "bt_vm_map bt_vm_get_kernel_map",
        "bt_vm_translate",
        "bt_vm_map_region",
        "bt_vm_unmap_region",
        "bt_vm_allocate",
        "bt_vm_free",
        "bt_pgd_t bt_mmu_newmap",
        "void bt_mmu_terminate",
        "void bt_mmu_switch",
        "void bt_mmu_flush_tlb",
        "bt_paddr_t bt_mmu_extract",
        "void bt_mmu_init",
        "void bt_mmu_killmap",
        "int bt_mmu_map",
        "bt_pgd_t bt_mmu_get_kernel_pgd",
        "bt_mmu_set_section"
      ],
      "lines": 87
    },
    {
      "file": "mm/bt_heap.h",
      "meta": {
      },
      "functions": [
        "BT_kMalloc",
        "BT_kFree"
      ],
      "lines": 8
    },
    {
      "file": "mm/bt_ioremap.h",
      "meta": {
      },
      "functions": [
        "bt_ioremap",
        "bt_iounmap"
      ],
      "lines": 60
    },
    {
      "file": "mm/bt_page.h",
      "meta": {
      },
      "functions": [
        "bt_page_alloc",
        "bt_page_alloc_aligned",
        "bt_page_free",
        "bt_page_reserve",
        "bt_page_alloc_coherent",
        "bt_page_free_coherent",
        "bt_page_reserve_coherent",
        "bt_page_info",
        "bt_page_pool_init",
        "bt_page_pool_alloc",
        "bt_page_pool_free",
        "bt_page_pool_attach",
        "bt_page_pool_reserve",
        "bt_initialise_pages",
        "bt_initialise_pages_second_stage",
        "bt_initialise_coherent_pages"
      ],
      "lines": 260
    },
    {
      "file": "mm/slab.h",
      "meta": {
      },
      "functions": [
        "bt_slab_info",
        "bt_initialise_slab",
        "bt_initialise_slab_second_stage",
        "BT_CacheInit",
        "BT_CacheAlloc",
        "BT_CacheFree"
      ],
      "lines": 33
    },
    {
      "file": "mm/bt_mm.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 46
    },
    {
      "file": "devman/bt_device.h",
      "meta": {
      },
      "functions": [
        "BT_GetTotalDevicesByType",
        "BT_DEVICE    BT_GetDeviceByType",
        "BT_RESOURCE  BT_GetDeviceResource"
      ],
      "lines": 71
    },
    {
      "file": "devman/bt_mtd.h",
      "meta": {
      },
      "functions": [
        "mtd_erase_callback",
        "BT_MTD_RegisterDevice",
        "BT_MTD_Erase",
        "BT_MTD_Read",
        "BT_MTD_Write",
        "BT_MTD_GetUserInfo"
      ],
      "lines": 149
    },
    {
      "file": "devman/bt_block.h",
      "meta": {
      },
      "functions": [
        "BT_RegisterBlockDevice",
        "BT_BlockRead",
        "BT_BlockWrite",
        "BT_GetBlockGeometry",
        "BT_BlockGetInode"
      ],
      "lines": 38
    },
    {
      "file": "devman/bt_resource.h",
      "meta": {
      },
      "functions": [
        "BT_RESOURCE BT_GetResource"
      ],
      "lines": 45
    },
    {
      "file": "devman/bt_i2c.h",
      "meta": {
      },
      "functions": [
        "BT_I2C_RegisterBus",
        "BT_I2C_GetBusByID",
        "BT_I2C_GetBusObject"
      ],
      "lines": 54
    },
    {
      "file": "devman/bt_devman.h",
      "meta": {
      },
      "functions": [
        "const BT_IF_HANDLE \t   ",
        "BT_ERROR",
        "BT_GetMachineDescription",
        "BT_GetTotalIntegratedDriversByType",
        "BT_GetIntegratedDriverByType",
        "BT_ProbeIntegratedDevices"
      ],
      "lines": 39
    },
    {
      "file": "devman/bt_integrated_device.h",
      "meta": {
      },
      "functions": [
        "BT_RESOURCE BT_GetIntegratedResource"
      ],
      "lines": 19
    },
    {
      "file": "devman/bt_driver.h",
      "meta": {
      },
      "functions": [
        "eType;\t\t\t\t\t\t\t union { BT_HANDLE",
        "",
        "",
        ""
      ],
      "lines": 36
    },
    {
      "file": "devman/bt_integrated_driver.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 9
    },
    {
      "file": "interfaces/bt_if_file.h",
      "meta": {
      },
      "functions": [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "lines": 44
    },
    {
      "file": "interfaces/bt_dev_if_uart.h",
      "meta": {
      },
      "functions": [
        "struct { BT_ERROR",
        "",
        "",
        "",
        "",
        "BT_UartSetBaudrate",
        "BT_UartSetConfiguration",
        "BT_UartGetConfiguration",
        "BT_UartEnable",
        "BT_UartDisable"
      ],
      "lines": 61
    },
    {
      "file": "interfaces/bt_dev_if_pwm.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_PWM { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_PwmStart",
        "BT_PwmStop",
        "BT_PwmSetConfiguration",
        "BT_PwmGetConfiguration",
        "BT_PwmGetPeriodCount",
        "BT_PwmSetFrequency",
        "BT_PwmGetFrequency",
        "BT_PwmGetDutyCylce",
        "BT_PwmSetDutyCycle",
        "BT_PwmGetDeadTime",
        "BT_PwmSetDeadTime"
      ],
      "lines": 42
    },
    {
      "file": "interfaces/bt_dev_if_adc.h",
      "meta": {
      },
      "functions": [
        "void",
        "struct _BT_DEV_IF_ADC { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_AdcStart",
        "BT_AdcStop",
        "BT_AdcSetConfiguration",
        "BT_AdcGetConfiguration",
        "BT_AdcRegisterCallback",
        "BT_AdcUnregisterCallback",
        "BT_AdcRead"
      ],
      "lines": 52
    },
    {
      "file": "interfaces/bt_if_dir.h",
      "meta": {
      },
      "functions": [
        ""
      ],
      "lines": 22
    },
    {
      "file": "interfaces/bt_dev_if_gpio.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_GPIO { BT_ERROR",
        "",
        "",
        "",
        "",
        ""
      ],
      "lines": 17
    },
    {
      "file": "interfaces/bt_if_block.h",
      "meta": {
      },
      "functions": [
        "",
        ""
      ],
      "lines": 26
    },
    {
      "file": "interfaces/bt_dev_if_rtc.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_RTC { BT_ERROR",
        ""
      ],
      "lines": 21
    },
    {
      "file": "interfaces/bt_if_device.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 121
    },
    {
      "file": "interfaces/bt_dev_if_spi.h",
      "meta": {
      },
      "functions": [
        "",
        "struct { BT_ERROR",
        "",
        "BT_SpiRegisterMaster",
        "BT_SpiMessageInit",
        "BT_SpiMessageAddTail",
        "BT_SpiTransferDel",
        "BT_SpiSetup",
        "BT_SpiSync",
        "BT_SpiBusLock",
        "BT_SpiBusUnlock",
        "BT_SpiWrite",
        "BT_SpiRead",
        "BT_SpiWriteThenRead"
      ],
      "lines": 98
    },
    {
      "file": "interfaces/bt_dev_if_qei.h",
      "meta": {
      },
      "functions": [
        "void",
        "struct _BT_DEV_IF_QEI { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_QEISetConfiguration",
        "BT_QEIGetConfiguration",
        "BT_QEIGetIndexCount",
        "BT_QEIGetPosition",
        "BT_QEISetMaximumPosition",
        "BT_QEISetPositionComparator",
        "BT_QEIGetVelocity",
        "BT_QEIEnableInterrupt",
        "BT_QEIDisableInterrupt",
        "BT_QEIClearInterrupt",
        "BT_QEIRegisterCallback",
        "BT_QEIUnregisterCallback"
      ],
      "lines": 64
    },
    {
      "file": "interfaces/bt_if_fs.h",
      "meta": {
      },
      "functions": [
        "{ BT_HANDLE",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "lines": 27
    },
    {
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_MCPWM { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_MCPwmStart",
        "BT_MCPwmStop",
        "BT_MCPwmSetConfiguration",
        "BT_MCPwmGetConfiguration",
        "BT_MCPwmGetChannelConfig",
        "BT_MCPwmSetChannelConfig",
        "BT_MCPwmGetChannelPulsewidth",
        "BT_MCPwmSetChannelPulsewidth",
        "BT_MCPwmSetDCModePattern"
      ],
      "lines": 75
    },
    {
      "file": "interfaces/bt_if_power.h",
      "meta": {
      },
      "functions": [
        "",
        "",
        "BT_SetPowerState",
        "BT_GetPowerState"
      ],
      "lines": 25
    },
    {
      "file": "interfaces/bt_if_cpu.h",
      "meta": {
      },
      "functions": [
        "BT_GetCoreID",
        "BT_GetTotalCores",
        "BT_BootCore",
        "BT_DCacheEnable",
        "BT_DCacheDisable",
        "BT_DCacheFlush",
        "BT_DCacheFlushLine",
        "BT_DCacheFlushRange",
        "BT_DCacheInvalidate",
        "BT_DCacheInvalidateLine",
        "BT_DCacheInvalidateRange",
        "BT_ICacheEnable",
        "BT_ICacheDisable",
        "BT_ICacheInvalidate"
      ],
      "lines": 23
    },
    {
      "file": "interfaces/bt_dev_if_i2c.h",
      "meta": {
      },
      "functions": [
        "BT_I2C_FUNC_SMBUS_WRITE_BYTE_DATA) BT_I2C_FUNC_SMBUS_WRITE_WORD_DATA) BT_I2C_FUNC_SMBUS_WRITE_BLOCK_DATA) BT_I2C_FUNC_SMBUS_WRITE_I2C_BLOCK) BT_I2C_FUNC_SMBUS_BYTE | \\ BT_I2C_FUNC_SMBUS_BYTE_DATA | \\ BT_I2C_FUNC_SMBUS_WORD_DATA | \\ BT_I2C_FUNC_SMBUS_PROC_CALL | \\ BT_I2C_FUNC_SMBUS_WRITE_BLOCK_DATA | \\ BT_I2C_FUNC_SMBUS_I2C_BLOCK | \\ BT_I2C_FUNC_SMBUS_PEC) BT_u32",
        "BT_I2C_Transfer",
        "BT_I2C_MasterSend",
        "BT_I2C_MasterReceive"
      ],
      "lines": 74
    },
    {
      "file": "interfaces/bt_dev_if_can.h",
      "meta": {
      },
      "functions": [
        "struct { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_CanSetBaudrate",
        "BT_CanSetConfiguration",
        "BT_CanGetConfiguration",
        "BT_CanEnable",
        "BT_CanDisable",
        "BT_CanSendMessage",
        "BT_CanReadMessage"
      ],
      "lines": 52
    },
    {
      "file": "interfaces/bt_if_chardev.h",
      "meta": {
      },
      "functions": [
        "",
        "",
        "",
        "",
        "",
        "BT_CharDeviceRead",
        "BT_CharDeviceWrite",
        "BT_CharDeviceFlush"
      ],
      "lines": 22
    },
    {
      "file": "interfaces/bt_dev_if_timer.h",
      "meta": {
      },
      "functions": [
        "void",
        "struct _BT_DEV_IF_TIMER { BT_u32",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_TimerStart",
        "BT_TimerStop",
        "BT_TimerSetConfiguration",
        "BT_TimerGetConfiguration",
        "BT_TimerEnableInterrupt",
        "BT_TimerDisableInterrupt",
        "BT_TimerRegisterCallback",
        "BT_TimerUnregisterCallback",
        "BT_TimerGetPrescaler",
        "BT_TimerSetPrescaler",
        "BT_TimerGetPeriodCount",
        "BT_TimerSetPeriodCount",
        "BT_TimerSetFrequency",
        "BT_TimerGetFrequency",
        "BT_TimerEnableReload",
        "BT_TimerDisableReload",
        "BT_TimerGetValue",
        "BT_TimerSetValue",
        "BT_TimerExpired"
      ],
      "lines": 57
    },
    {
      "file": "interfaces/bt_dev_if_systimer.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_SYSTIMER { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "lines": 19
    },
    {
      "file": "interfaces/bt_dev_if_sdio.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_SDIO { BT_ERROR"
      ],
      "lines": 10
    },
    {
      "file": "interfaces/bt_dev_if_irq.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_IRQ { BT_ERROR",
        "",
        "BT_i8 ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ],
      "lines": 24
    },
    {
      "file": "interfaces/bt_dev_if_mtd.h",
      "meta": {
      },
      "functions": [
        "",
        "struct { BT_ERROR",
        "",
        ""
      ],
      "lines": 26
    },
    {
      "file": "interfaces/bt_dev_if_dac.h",
      "meta": {
      },
      "functions": [
        "void",
        "struct _BT_DEV_IF_DAC { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_DacStart",
        "BT_DacStop",
        "BT_DacSetConfiguration",
        "BT_DacGetConfiguration",
        "BT_DacRegisterCallback",
        "BT_DacUnregisterCallback",
        "BT_DacWrite"
      ],
      "lines": 44
    },
    {
      "file": "interfaces/bt_dev_if_gtimer.h",
      "meta": {
      },
      "functions": [
        "struct _BT_DEV_IF_GTIMER { BT_u32",
        ""
      ],
      "lines": 11
    },
    {
      "file": "interfaces/bt_dev_if_emac.h",
      "meta": {
      },
      "functions": [
        "void",
        "ulCapabilities;\t\t\t BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "struct _BT_DEV_IF_MII { BT_u16",
        "",
        "",
        "struct BT_DEV_IF_PHY { BT_ERROR",
        "",
        ""
      ],
      "lines": 61
    },
    {
      "file": "interfaces/bt_if_inode.h",
      "meta": {
      },
      "functions": [
        ""
      ],
      "lines": 18
    },
    {
      "file": "interrupts/bt_tasklets.h",
      "meta": {
      },
      "functions": [
        "void",
        "BT_TaskletSchedule",
        "BT_TaskletHighSchedule"
      ],
      "lines": 34
    },
    {
      "file": "interrupts/bt_interrupts.h",
      "meta": {
      },
      "functions": [
        "BT_ERROR",
        "BT_RegisterInterruptController",
        "BT_RegisterInterrupt",
        "BT_SetInterruptLabel",
        "BT_i8 BT_GetInterruptLabel",
        "BT_InterruptRegistered",
        "BT_UnregisterInterrupt",
        "BT_SetInterruptPriority",
        "BT_GetInterruptPriority",
        "BT_EnableInterrupt",
        "BT_DisableInterrupt",
        "BT_GetInterruptCount",
        "BT_EnableInterrupts",
        "BT_DisableInterrupts",
        "BT_GetInterruptCount",
        "BT_SetInterruptAffinity"
      ],
      "lines": 50
    },
    {
      "file": "interrupts/bt_softirq.h",
      "meta": {
      },
      "functions": [
        "void",
        "BT_OpenSoftIRQ",
        "BT_RaiseSoftIRQ",
        "BT_RaiseSoftIRQFromISR"
      ],
      "lines": 38
    },
    {
      "file": "helpers/bt_bitops.h",
      "meta": {
      },
      "functions": [
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "1UL &",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        ""
      ],
      "lines": 149
    },
    {
      "file": "helpers/bt_clkdiv.h",
      "meta": {
      },
      "functions": [
        "BT_CalculateClockDivider"
      ],
      "lines": 23
    },
    {
      "file": "bt_export.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 16
    },
    {
      "file": "fs/fullfat/ff.config.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 51
    },
    {
      "file": "fs/bt_dir.h",
      "meta": {
      },
      "functions": [
        "BT_ReadDir"
      ],
      "lines": 21
    },
    {
      "file": "fs/bt_inode.h",
      "meta": {
      },
      "functions": [
        "BT_ReadInode"
      ],
      "lines": 20
    },
    {
      "file": "fs/bt_file.h",
      "meta": {
      },
      "functions": [
        "BT_Read",
        "BT_Write",
        "BT_GetC",
        "BT_PutC",
        "BT_Seek",
        "BT_Tell",
        "BT_GetS",
        "BT_Flush",
        "BT_EOF"
      ],
      "lines": 22
    },
    {
      "file": "fs/bt_devfs.h",
      "meta": {
      },
      "functions": [
        "",
        "BT_DeviceOpen",
        "BT_DeviceRegister",
        "BT_GetInodeName"
      ],
      "lines": 45
    },
    {
      "file": "fs/bt_fs.h",
      "meta": {
      },
      "functions": [
        "BT_RegisterFilesystem",
        "BT_GetModeFlags",
        "BT_Open",
        "BT_Mount",
        "BT_MkDir",
        "BT_RmDir",
        "BT_OpenDir",
        "BT_GetInode",
        "BT_Remove",
        "BT_Unlink",
        "BT_Rename",
        "BT_GetCwd",
        "BT_ChDir"
      ],
      "lines": 37
    },
    {
      "file": "net/bt_lwip.h",
      "meta": {
      },
      "functions": [
        "bt_lwip_netif_init",
        "bt_lwip_process",
        "bt_lwip_netif_up",
        "bt_lwip_netif_down",
        "bt_lwip_netif_set_addr",
        "bt_lwip_netif_get_addr",
        "bt_lwip_netif_dhcp_done",
        "bt_lwip_netif_get_hostname"
      ],
      "lines": 24
    },
    {
      "file": "net/lwip/lwipopts.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 86
    },
    {
      "file": "net/lwip/arch/cc.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 87
    },
    {
      "file": "net/lwip/arch/perf.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 38
    },
    {
      "file": "net/lwip/arch/sys_arch.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 26
    },
    {
      "file": "net/bt_net.h",
      "meta": {
      },
      "functions": [
        "BT_RegisterNetworkInterface",
        "BT_isNetworkingReady",
        "BT_GetTotalNetworkInterfaces",
        "BT_GetNetif",
        "BT_GetNetifFromHandle",
        "BT_GetNetifByIndex",
        "BT_NetifGetMacAddress",
        "BT_NetifSetMacAddress",
        "BT_NetifSetAddress",
        "BT_NetifGetAddress",
        "BT_NetifConfigureLink",
        "BT_NetifRestartLink",
        "BT_NetifGetLinkState",
        "BT_StartNetif",
        "BT_StopNetif",
        "BT_NetifGetHostname",
        "bt_netif_adjust_link"
      ],
      "lines": 80
    },
    {
      "file": "net/bt_phy.h",
      "meta": {
      },
      "functions": [
        "BT_RegisterMiiBus",
        "BT_ConnectPHY",
        "bt_phy_read",
        "bt_phy_write",
        "bt_phy_generic_init",
        "bt_phy_generic_read_status"
      ],
      "lines": 217
    },
    {
      "file": "net/bt_sockets.h",
      "meta": {
      },
      "functions": [
        "accept",
        "bind",
        "shutdown",
        "getpeername",
        "getsockname",
        "getsockopt",
        "setsockopt",
        "close",
        "connect",
        "listen",
        "recv",
        "read",
        "send",
        "socket",
        "closesocket",
        "write",
        "ioctl",
        "fcntl"
      ],
      "lines": 33
    },
    {
      "file": "of/bt_of_irq.h",
      "meta": {
      },
      "functions": [
        "bt_of_irq_count",
        "bt_of_irq_to_resource_table"
      ],
      "lines": 17
    },
    {
      "file": "of/bt_of.h",
      "meta": {
      },
      "functions": [
        "void bt_of_get_fdt",
        "bt_device_node bt_of_node_get",
        "bt_of_node_put",
        "bt_device_node bt_of_get_parent",
        "bt_device_property bt_of_find_property",
        "void bt_of_get_property",
        "bt_of_n_addr_cells",
        "bt_of_n_size_cells",
        "bt_of_can_translate_address",
        "bt_of_address_to_resource",
        "BT_be32 bt_of_get_address",
        "bt_of_is_compatible",
        "bt_device_node bt_of_find_node_by_path",
        "bt_device_node bt_of_find_node_by_phandle",
        "bt_of_integrated_probe",
        "bt_of_integrated_populate",
        "bt_of_integrated_populate_device",
        "bt_of_unflatten_device_tree",
        "bt_of_init",
        "inline BT_u64 bt_of_read_number",
        "",
        "struct bt_device_node bt_of_get_bootlogger",
        "bt_device_node bt_of_integrated_get_node",
        "bt_of_i2c_populate_device",
        "bt_of_spi_populate_device",
        "void bt_of_get_mac_address",
        "bt_device_node bt_of_mdio_get_node",
        "bt_of_mdio_populate_device"
      ],
      "lines": 59
    },
    {
      "file": "gpio/bt_gpio.h",
      "meta": {
      },
      "functions": [
        "BT_RegisterGpioController",
        "BT_GpioSet",
        "BT_GpioGet",
        "BT_GpioSetDirection",
        "BT_GpioGetDirection",
        "BT_GpioEnableInterrupt",
        "BT_GpioDisableInterrupt"
      ],
      "lines": 26
    },
    {
      "file": "rtc/bt_rtc.h",
      "meta": {
      },
      "functions": [
        "BT_RTCRegisterDevice",
        "BT_RTCSetTime",
        "BT_RTCGetTime"
      ],
      "lines": 23
    },
    {
      "file": "lib/multiplexer.h",
      "meta": {
      },
      "functions": [
        "BT_CreateMux",
        "BT_MuxOpen",
        "BT_MuxAttach"
      ],
      "lines": 9
    },
    {
      "file": "lib/bcd.h",
      "meta": {
      },
      "functions": [
        "bcd2bin",
        "bin2bcd"
      ],
      "lines": 9
    },
    {
      "file": "lib/printf.h",
      "meta": {
      },
      "functions": [
        "bt_kvprintf",
        "bt_printf",
        "bt_fprintf",
        "bt_sprintf"
      ],
      "lines": 15
    },
    {
      "file": "lib/ctype.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 64
    },
    {
      "file": "lib/putc.h",
      "meta": {
      },
      "functions": [
        "BT_SetStdin",
        "BT_GetStdin",
        "BT_SetStdout",
        "BT_GetStdout",
        "BT_SetStderr",
        "BT_GetStderr",
        "bt_getc",
        "bt_fgetc",
        "bt_putc",
        "bt_fputc"
      ],
      "lines": 25
    },
    {
      "file": "lib/getmem.h",
      "meta": {
      },
      "functions": [
        "bt_cpu_to_le64",
        "bt_cpu_to_le32",
        "bt_cpu_to_le16",
        "bt_le64_to_cpu",
        "bt_le32_to_cpu",
        "bt_le16_to_cpu",
        "bt_cpu_to_be64",
        "bt_cpu_to_be32",
        "bt_cpu_to_be16",
        "bt_be64_to_cpu",
        "bt_be32_to_cpu",
        "bt_be16_to_cpu",
        "BT_GetLongLE",
        "BT_GetShortLE"
      ],
      "lines": 184
    },
    {
      "file": "volumes/bt_volume.h",
      "meta": {
      },
      "functions": [
        "BT_EnumerateVolumes",
        "BT_VolumeRead",
        "BT_VolumeWrite"
      ],
      "lines": 10
    },
    {
      "file": "syslog/bt_printk.h",
      "meta": {
      },
      "functions": [
        "BT_kPrint"
      ],
      "lines": 19
    },
    {
      "file": "syscall/bt_syscall.h",
      "meta": {
      },
      "functions": [
        "bt_sys_yield",
        "bt_sys_getpid",
        "bt_sys_open",
        "bt_sys_close",
        "bt_sys_read",
        "bt_sys_write",
        "bt_sys_klog",
        "bt_sys_sleep",
        "bt_sys_gpioset"
      ],
      "lines": 24
    },
    {
      "file": "btlinker_config.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 84
    },
    {
      "file": "bt_os.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 42
    },
    {
      "file": "module/bt_module_init.h",
      "meta": {
      },
      "functions": [
        "",
        "BT_InitialiseKernelModules"
      ],
      "lines": 14
    },
    {
      "file": "shell/bt_shell.h",
      "meta": {
      },
      "functions": [
        "int",
        "BT_ShellCreate",
        "BT_ShellDestroy",
        "BT_ShellGetStdout",
        "BT_ShellGetStdin",
        "char BT_ShellGetPrompt",
        "BT_ShellUpdatePrompt",
        "BT_ShellGetFlags",
        "BT_Shell",
        "BT_ShellCommand",
        "BT_ShellScript"
      ],
      "lines": 42
    },
    {
      "file": "shell/bt_env.h",
      "meta": {
      },
      "functions": [
        "BT_ShellSetEnv",
        "BT_ShellGetEnv",
        "BT_ShellGetStarredEnv",
        "BT_ShellGetNextEnv"
      ],
      "lines": 37
    },
    {
      "file": "loader/bt_elf.h",
      "meta": {
      },
      "functions": [
        "void"
      ],
      "lines": 6
    },
    {
      "file": "loader/elf.h",
      "meta": {
      },
      "functions": [

      ],
      "lines": 2725
    },
    {
      "file": "loader/bt_loader.h",
      "meta": {
      },
      "functions": [
        "void",
        "",
        "",
        "BT_ExecImageFile"
      ],
      "lines": 25
    }
  ],
  "functions": {
    "": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnDecode",
          "comment": ""
        }
      ],
      "argline": "*pfnDecode",
      "file": "loader/bt_loader.h",
      "line": 18,
      "lineto": 18,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "loader_bt_loader.h"
    },
    "BT_GetCpuClockFrequency": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "machines/bt_machines.h",
      "line": 55,
      "lineto": 55,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "machines_bt_machines.h"
    },
    "void": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*BT_LOADER_SEGMENT_CB",
          "comment": ""
        }
      ],
      "argline": "*BT_LOADER_SEGMENT_CB",
      "file": "loader/bt_loader.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "loader_bt_loader.h"
    },
    "BT_kStartScheduler": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "bt_kernel.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kStopScheduler": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "bt_kernel.h",
      "line": 23,
      "lineto": 23,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kTaskCreate": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_FN_TASK_ENTRY",
          "name": "pfnStartRoutine",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "szpName",
          "comment": ""
        },
        {
          "type": "BT_THREAD_CONFIG *",
          "name": "pConfig",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_FN_TASK_ENTRY pfnStartRoutine, const BT_i8 *szpName, BT_THREAD_CONFIG *pConfig, BT_ERROR *pError",
      "file": "bt_kernel.h",
      "line": 24,
      "lineto": 24,
      "comments": "",
      "sig": "BT_FN_TASK_ENTRY::const BT_i8 *::BT_THREAD_CONFIG *::BT_ERROR *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kTaskDelete": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pTaskHandle",
          "comment": ""
        }
      ],
      "argline": "void *pTaskHandle",
      "file": "bt_kernel.h",
      "line": 25,
      "lineto": 25,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kTickCount": {
      "description": "",
      "return": {
        "type": "BT_TICK",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "bt_kernel.h",
      "line": 27,
      "lineto": 27,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kTaskDelay": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_TICK",
          "name": "ulTicks",
          "comment": ""
        }
      ],
      "argline": "BT_TICK ulTicks",
      "file": "bt_kernel.h",
      "line": 28,
      "lineto": 28,
      "comments": "",
      "sig": "BT_TICK",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kTaskDelayUntil": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_TICK *",
          "name": "pulPreviousWakeTime",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "ulTimeIncrement",
          "comment": ""
        }
      ],
      "argline": "BT_TICK *pulPreviousWakeTime, BT_TICK ulTimeIncrement",
      "file": "bt_kernel.h",
      "line": 29,
      "lineto": 29,
      "comments": "",
      "sig": "BT_TICK *::BT_TICK",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kTaskYield": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "bt_kernel.h",
      "line": 30,
      "lineto": 30,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kGetThreadTag": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pThreadID",
          "comment": ""
        }
      ],
      "argline": "void *pThreadID",
      "file": "bt_kernel.h",
      "line": 31,
      "lineto": 31,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kSetThreadTag": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pThreadID",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pTagData",
          "comment": ""
        }
      ],
      "argline": "void *pThreadID, void *pTagData",
      "file": "bt_kernel.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "void *::void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kMutexCreate": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "bt_kernel.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kRecursiveMutexCreate": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "bt_kernel.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kMutexDestroy": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pMutex",
          "comment": ""
        }
      ],
      "argline": "void *pMutex",
      "file": "bt_kernel.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kMutexPend": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pMutex",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulTimeout",
          "comment": ""
        }
      ],
      "argline": "void *pMutex, BT_u32 ulTimeout",
      "file": "bt_kernel.h",
      "line": 37,
      "lineto": 37,
      "comments": "",
      "sig": "void *::BT_u32",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kMutexRelease": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pMutex",
          "comment": ""
        }
      ],
      "argline": "void *pMutex",
      "file": "bt_kernel.h",
      "line": 38,
      "lineto": 38,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kMutexPendRecursive": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pMutex",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulTimeout",
          "comment": ""
        }
      ],
      "argline": "void *pMutex, BT_u32 ulTimeout",
      "file": "bt_kernel.h",
      "line": 39,
      "lineto": 39,
      "comments": "",
      "sig": "void *::BT_u32",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kMutexReleaseRecursive": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pMutex",
          "comment": ""
        }
      ],
      "argline": "void *pMutex",
      "file": "bt_kernel.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kMutexReleaseFromISR": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pMutex",
          "comment": ""
        },
        {
          "type": "BT_BOOL *",
          "name": "pbHigherPriorityTaskWoken",
          "comment": ""
        }
      ],
      "argline": "void *pMutex, BT_BOOL *pbHigherPriorityTaskWoken",
      "file": "bt_kernel.h",
      "line": 41,
      "lineto": 41,
      "comments": "",
      "sig": "void *::BT_BOOL *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueCreate": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulElements",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulElementWidth",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulElements, BT_u32 ulElementWidth",
      "file": "bt_kernel.h",
      "line": 43,
      "lineto": 43,
      "comments": "",
      "sig": "BT_u32::BT_u32",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueDestroy": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        }
      ],
      "argline": "void *pQueue",
      "file": "bt_kernel.h",
      "line": 44,
      "lineto": 44,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueSend": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        },
        {
          "type": "const void*",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "void *pQueue, const void* pMessage, BT_TICK oTimeoutTicks",
      "file": "bt_kernel.h",
      "line": 45,
      "lineto": 45,
      "comments": "",
      "sig": "void *::const void*::BT_TICK",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueSendFromISR": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        },
        {
          "type": "const void*",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_BOOL *",
          "name": "pbHigherPriorityTaskWoken",
          "comment": ""
        }
      ],
      "argline": "void *pQueue, const void* pMessage, BT_BOOL *pbHigherPriorityTaskWoken",
      "file": "bt_kernel.h",
      "line": 46,
      "lineto": 46,
      "comments": "",
      "sig": "void *::const void*::BT_BOOL *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueSendToFront": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        },
        {
          "type": "const void*",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "void *pQueue, const void* pMessage, BT_TICK oTimeoutTicks",
      "file": "bt_kernel.h",
      "line": 47,
      "lineto": 47,
      "comments": "",
      "sig": "void *::const void*::BT_TICK",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueSendToBack": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        },
        {
          "type": "const void*",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "void *pQueue, const void* pMessage, BT_TICK oTimeoutTicks",
      "file": "bt_kernel.h",
      "line": 48,
      "lineto": 48,
      "comments": "",
      "sig": "void *::const void*::BT_TICK",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueReceive": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        },
        {
          "type": "void*",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "void *pQueue, void* pMessage, BT_TICK oTimeoutTicks",
      "file": "bt_kernel.h",
      "line": 49,
      "lineto": 49,
      "comments": "",
      "sig": "void *::void*::BT_TICK",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueReceiveFromISR": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        },
        {
          "type": "void*",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_BOOL *",
          "name": "pbHigherPriorityTaskWoken",
          "comment": ""
        }
      ],
      "argline": "void *pQueue, void* pMessage, BT_BOOL *pbHigherPriorityTaskWoken",
      "file": "bt_kernel.h",
      "line": 50,
      "lineto": 50,
      "comments": "",
      "sig": "void *::void*::BT_BOOL *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kQueueMessagesWaiting": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pQueue",
          "comment": ""
        }
      ],
      "argline": "void *pQueue",
      "file": "bt_kernel.h",
      "line": 51,
      "lineto": 51,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kEnterCritical": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "bt_kernel.h",
      "line": 53,
      "lineto": 53,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "BT_kExitCritical": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "bt_kernel.h",
      "line": 54,
      "lineto": 54,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "bt_get_kernel_params": {
      "description": "",
      "return": {
        "type": "bt_kernel_params*",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "bt_kernel.h",
      "line": 56,
      "lineto": 56,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bt_kernel.h"
    },
    "= ALIGN": {
      "description": "",
      "return": {
        "type": ".",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "16",
          "comment": ""
        }
      ],
      "argline": "16",
      "file": "bitthunder.lds.h",
      "line": 329,
      "lineto": 329,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "bitthunder.lds.h"
    },
    "= __sdata_start +": {
      "description": "",
      "return": {
        "type": "_SDA_BASE_",
        "comment": null
      },
      "args": [
        {
          "type": "(__sbss_end -",
          "name": "__sdata_start",
          "comment": ""
        }
      ],
      "argline": "(__sbss_end - __sdata_start",
      "file": "bitthunder.lds.h",
      "line": 266,
      "lineto": 269,
      "comments": "} > BT_LINKER_TEXT_SECTION",
      "sig": "(__sbss_end -",
      "rawComments": "} > BT_LINKER_TEXT_SECTION",
      "group": "bitthunder.lds.h"
    },
    "= __sdata2_start +": {
      "description": "",
      "return": {
        "type": "_SDA2_BASE_",
        "comment": null
      },
      "args": [
        {
          "type": "(__sbss2_end -",
          "name": "__sdata2_start",
          "comment": ""
        }
      ],
      "argline": "(__sbss2_end - __sdata2_start",
      "file": "bitthunder.lds.h",
      "line": 271,
      "lineto": 271,
      "comments": "",
      "sig": "(__sbss2_end -",
      "rawComments": "",
      "group": "bitthunder.lds.h"
    },
    "BT_CreateQueue": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulElements",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulElementWidth",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulElements, BT_u32 ulElementWidth, BT_ERROR *pError",
      "file": "process/bt_queue.h",
      "line": 4,
      "lineto": 4,
      "comments": "",
      "sig": "BT_u32::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_QueueSend": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQueue",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQueue, const void *pMessage, BT_TICK oTimeoutTicks",
      "file": "process/bt_queue.h",
      "line": 5,
      "lineto": 5,
      "comments": "",
      "sig": "BT_HANDLE::const void *::BT_TICK",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_QueueSendFromISR": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQueue",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_BOOL *",
          "name": "pbHigherPriorityTaskWoken",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQueue, const void *pMessage, BT_BOOL *pbHigherPriorityTaskWoken",
      "file": "process/bt_queue.h",
      "line": 6,
      "lineto": 6,
      "comments": "",
      "sig": "BT_HANDLE::const void *::BT_BOOL *",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_QueueSendToBack": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQueue",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQueue, const void *pMessage, BT_TICK oTimeoutTicks",
      "file": "process/bt_queue.h",
      "line": 7,
      "lineto": 7,
      "comments": "",
      "sig": "BT_HANDLE::const void *::BT_TICK",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_QueueSendToFront": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQueue",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQueue, const void *pMessage, BT_TICK oTimeoutTicks",
      "file": "process/bt_queue.h",
      "line": 8,
      "lineto": 8,
      "comments": "",
      "sig": "BT_HANDLE::const void *::BT_TICK",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_QueueReceive": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQueue",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQueue, void *pMessage, BT_TICK oTimeoutTicks",
      "file": "process/bt_queue.h",
      "line": 9,
      "lineto": 9,
      "comments": "",
      "sig": "BT_HANDLE::void *::BT_TICK",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_QueueReceiveFromISR": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQueue",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pMessage",
          "comment": ""
        },
        {
          "type": "BT_BOOL *",
          "name": "pbHigherPriorityTaskWoken",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQueue, void *pMessage, BT_BOOL *pbHigherPriorityTaskWoken",
      "file": "process/bt_queue.h",
      "line": 10,
      "lineto": 10,
      "comments": "",
      "sig": "BT_HANDLE::void *::BT_BOOL *",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_QueueMessagesWaiting": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQueue",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQueue",
      "file": "process/bt_queue.h",
      "line": 11,
      "lineto": 11,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "process_bt_queue.h"
    },
    "BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*BT_FN_INTERRUPT_HANDLER",
          "comment": ""
        }
      ],
      "argline": "*BT_FN_INTERRUPT_HANDLER",
      "file": "interrupts/bt_interrupts.h",
      "line": 8,
      "lineto": 8,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_CreateThread": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_FN_THREAD_ENTRY",
          "name": "pfnStartRoutine",
          "comment": ""
        },
        {
          "type": "BT_THREAD_CONFIG *",
          "name": "pConfig",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_FN_THREAD_ENTRY pfnStartRoutine, BT_THREAD_CONFIG *pConfig, BT_ERROR *pError",
      "file": "process/bt_threads.h",
      "line": 31,
      "lineto": 31,
      "comments": "",
      "sig": "BT_FN_THREAD_ENTRY::BT_THREAD_CONFIG *::BT_ERROR *",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_CreateProcessThread": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hProcess",
          "comment": ""
        },
        {
          "type": "BT_FN_THREAD_ENTRY",
          "name": "pfnStartRoutine",
          "comment": ""
        },
        {
          "type": "BT_THREAD_CONFIG *",
          "name": "pConfig",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hProcess, BT_FN_THREAD_ENTRY pfnStartRoutine, BT_THREAD_CONFIG *pConfig, BT_ERROR *pError",
      "file": "process/bt_threads.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "BT_HANDLE::BT_FN_THREAD_ENTRY::BT_THREAD_CONFIG *::BT_ERROR *",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_GetThreadHandle": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "process/bt_threads.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_GetThreadProcessHandle": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hThread",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hThread",
      "file": "process/bt_threads.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_ThreadSleepUntil": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_TICK *",
          "name": "pulPreviousWakeTime",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulTimeMs",
          "comment": ""
        }
      ],
      "argline": "BT_TICK *pulPreviousWakeTime, BT_u32 ulTimeMs",
      "file": "process/bt_threads.h",
      "line": 37,
      "lineto": 37,
      "comments": "",
      "sig": "BT_TICK *::BT_u32",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_ThreadSleep": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulTimeMs",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulTimeMs",
      "file": "process/bt_threads.h",
      "line": 38,
      "lineto": 38,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_ThreadYield": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "process/bt_threads.h",
      "line": 39,
      "lineto": 39,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_GetThreadTag": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "process/bt_threads.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_SetThreadTag": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "tag",
          "comment": ""
        }
      ],
      "argline": "void *tag",
      "file": "process/bt_threads.h",
      "line": 41,
      "lineto": 41,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "process_bt_threads.h"
    },
    "BT_CreateMutex": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_ERROR *pError",
      "file": "process/bt_mutex.h",
      "line": 4,
      "lineto": 4,
      "comments": "",
      "sig": "BT_ERROR *",
      "rawComments": "",
      "group": "process_bt_mutex.h"
    },
    "BT_PendMutex": {
      "description": "Pends on a Mutex resource for the specified timeout.",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMutex",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMutex, BT_TICK oTimeoutTicks",
      "file": "process/bt_mutex.h",
      "line": 6,
      "lineto": 13,
      "comments": "@param[in]\thMutex\t\t\tHANDLE to Mutex object/event on which to pend.\n@param[in]\toTimeoutTicks\tNumber of kernel ticks to pend.",
      "sig": "BT_HANDLE::BT_TICK",
      "rawComments": "Pends on a Mutex resource for the specified timeout.\n\n@param[in]\thMutex\t\t\tHANDLE to Mutex object/event on which to pend.\n@param[in]\toTimeoutTicks\tNumber of kernel ticks to pend.",
      "group": "process_bt_mutex.h"
    },
    "BT_ReleaseMutex": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMutex",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMutex",
      "file": "process/bt_mutex.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "process_bt_mutex.h"
    },
    "BT_PendMutexRecursive": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMutex",
          "comment": ""
        },
        {
          "type": "BT_TICK",
          "name": "oTimeoutTicks",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMutex, BT_TICK oTimeoutTicks",
      "file": "process/bt_mutex.h",
      "line": 15,
      "lineto": 15,
      "comments": "",
      "sig": "BT_HANDLE::BT_TICK",
      "rawComments": "",
      "group": "process_bt_mutex.h"
    },
    "BT_ReleaseMutexRecursive": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMutex",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMutex",
      "file": "process/bt_mutex.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "process_bt_mutex.h"
    },
    "BT_ReleaseMutexFromISR": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMutex",
          "comment": ""
        },
        {
          "type": "BT_BOOL *",
          "name": "pbHigherPriorityThreadWoken",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMutex, BT_BOOL *pbHigherPriorityThreadWoken",
      "file": "process/bt_mutex.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "BT_HANDLE::BT_BOOL *",
      "rawComments": "",
      "group": "process_bt_mutex.h"
    },
    "BT_CreateProcess": {
      "description": "Create a new process within Kernel-space.",
      "return": {
        "type": "BT_HANDLE",
        "comment": "Handle to process created."
      },
      "args": [
        {
          "type": "BT_FN_THREAD_ENTRY",
          "name": "pfnStartRoutine",
          "comment": "[IN] Pointer to executable code where this process will start."
        },
        {
          "type": "const BT_i8 *",
          "name": "szpName",
          "comment": "[IN] Name of the process as seen by the kernel."
        },
        {
          "type": "BT_THREAD_CONFIG *",
          "name": "pConfig",
          "comment": "[IN] Pointer to BT_THREAD_CONFIG parameters for starting this process."
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": "[OUT] A BT_ERROR code in case of errors."
        }
      ],
      "argline": "BT_FN_THREAD_ENTRY pfnStartRoutine, const BT_i8 *szpName, BT_THREAD_CONFIG *pConfig, BT_ERROR *pError",
      "file": "process/bt_process.h",
      "line": 35,
      "lineto": 52,
      "comments": "There is no specific api to create a user-space process, simply the user-space\ncode should be loaded by a start-routine that configures the memory map and loads\nthe executable code.\n\nOnce loaded, the routine switches the cpu into unprivileged mode and jumps to\nthe untrusted code's entry point.",
      "sig": "BT_FN_THREAD_ENTRY::const BT_i8 *::BT_THREAD_CONFIG *::BT_ERROR *",
      "rawComments": "Create a new process within Kernel-space.\n\nThere is no specific api to create a user-space process, simply the user-space\ncode should be loaded by a start-routine that configures the memory map and loads\nthe executable code.\n\nOnce loaded, the routine switches the cpu into unprivileged mode and jumps to\nthe untrusted code's entry point.",
      "group": "process_bt_process.h"
    },
    "BT_GetProcessHandle": {
      "description": "Get handle of the currently executing process.",
      "return": {
        "type": "BT_HANDLE",
        "comment": "NULL if not a process context.\nBT_HANDLE of the current process."
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "process/bt_process.h",
      "line": 54,
      "lineto": 60,
      "comments": "",
      "sig": "",
      "rawComments": "Get handle of the currently executing process.",
      "group": "process_bt_process.h"
    },
    "BT_GetKernelProcessHandle": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "process/bt_process.h",
      "line": 61,
      "lineto": 61,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_GetParentProcessHandle": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "process/bt_process.h",
      "line": 62,
      "lineto": 62,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "bt_task BT_GetProcessTask": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hProces",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hProces",
      "file": "process/bt_process.h",
      "line": 64,
      "lineto": 64,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_GetProcessTime": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_process_time *",
          "name": "time",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "i",
          "comment": ""
        }
      ],
      "argline": "struct bt_process_time *time, BT_u32 i",
      "file": "process/bt_process.h",
      "line": 66,
      "lineto": 66,
      "comments": "",
      "sig": "struct bt_process_time *::BT_u32",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_GetTotalProcesses": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "process/bt_process.h",
      "line": 67,
      "lineto": 67,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_AllocFileDescriptor": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "process/bt_process.h",
      "line": 69,
      "lineto": 69,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_FreeFileDescriptor": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_s32",
          "name": "fd",
          "comment": ""
        }
      ],
      "argline": "BT_s32 fd",
      "file": "process/bt_process.h",
      "line": 70,
      "lineto": 70,
      "comments": "",
      "sig": "BT_s32",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_SetFileDescriptor": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "i",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        }
      ],
      "argline": "BT_u32 i, BT_HANDLE h",
      "file": "process/bt_process.h",
      "line": 71,
      "lineto": 71,
      "comments": "",
      "sig": "BT_u32::BT_HANDLE",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_GetFileDescriptor": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "i",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_u32 i, BT_ERROR *pError",
      "file": "process/bt_process.h",
      "line": 72,
      "lineto": 72,
      "comments": "",
      "sig": "BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_SetProcessFileDescriptor": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hProcess",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "i",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hProcess, BT_u32 i, BT_HANDLE h",
      "file": "process/bt_process.h",
      "line": 73,
      "lineto": 73,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_HANDLE",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_GetProcessFileDescriptor": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hProcess",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "i",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hProcess, BT_u32 i, BT_ERROR *pError",
      "file": "process/bt_process.h",
      "line": 74,
      "lineto": 74,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "bt_process_init": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "process/bt_process.h",
      "line": 76,
      "lineto": 76,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "process_bt_process.h"
    },
    "BT_SetSystemTimerHandle": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "timers/bt_timers.h",
      "line": 6,
      "lineto": 6,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "BT_SetGlobalTimerHandle": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "timers/bt_timers.h",
      "line": 7,
      "lineto": 7,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "BT_GetSystemTimerOffset": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "timers/bt_timers.h",
      "line": 9,
      "lineto": 9,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "BT_StopSystemTimer": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "timers/bt_timers.h",
      "line": 10,
      "lineto": 10,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "BT_GetGlobalTimer": {
      "description": "",
      "return": {
        "type": "BT_u64",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "timers/bt_timers.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "BT_GetGlobalTimerRate": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "timers/bt_timers.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "BT_GetKernelTime": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "timers/bt_timers.h",
      "line": 15,
      "lineto": 15,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "BT_GetKernelTick": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "timers/bt_timers.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "timers_bt_timers.h"
    },
    "bt_vm_init": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_vm.h",
      "line": 52,
      "lineto": 61,
      "comments": "type of virtual memory mappings",
      "sig": "",
      "rawComments": "type of virtual memory mappings",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_map bt_vm_create": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_vm.h",
      "line": 62,
      "lineto": 62,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_destroy": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_vm_map *",
          "name": "map",
          "comment": ""
        }
      ],
      "argline": "struct bt_vm_map * map",
      "file": "mm/bt_vm.h",
      "line": 63,
      "lineto": 63,
      "comments": "",
      "sig": "struct bt_vm_map *",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_map bt_vm_get_kernel_map": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_vm.h",
      "line": 64,
      "lineto": 64,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_translate": {
      "description": "",
      "return": {
        "type": "bt_paddr_t",
        "comment": null
      },
      "args": [
        {
          "type": "bt_vaddr_t",
          "name": "addr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        }
      ],
      "argline": "bt_vaddr_t addr, BT_u32 size",
      "file": "mm/bt_vm.h",
      "line": 65,
      "lineto": 65,
      "comments": "",
      "sig": "bt_vaddr_t::BT_u32",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_map_region": {
      "description": "",
      "return": {
        "type": "bt_vaddr_t",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_vm_map *",
          "name": "map",
          "comment": ""
        },
        {
          "type": "bt_paddr_t",
          "name": "pa",
          "comment": ""
        },
        {
          "type": "bt_vaddr_t",
          "name": "va",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "type",
          "comment": ""
        }
      ],
      "argline": "struct bt_vm_map *map, bt_paddr_t pa, bt_vaddr_t va, BT_u32 size, BT_u32 type",
      "file": "mm/bt_vm.h",
      "line": 66,
      "lineto": 66,
      "comments": "",
      "sig": "struct bt_vm_map *::bt_paddr_t::bt_vaddr_t::BT_u32::BT_u32",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_unmap_region": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_vm_map *",
          "name": "map",
          "comment": ""
        },
        {
          "type": "bt_vaddr_t",
          "name": "va",
          "comment": ""
        }
      ],
      "argline": "struct bt_vm_map *map, bt_vaddr_t va",
      "file": "mm/bt_vm.h",
      "line": 67,
      "lineto": 67,
      "comments": "",
      "sig": "struct bt_vm_map *::bt_vaddr_t",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_allocate": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_task *",
          "name": "task",
          "comment": ""
        },
        {
          "type": "void **",
          "name": "addr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "flags",
          "comment": ""
        }
      ],
      "argline": "struct bt_task *task, void **addr, BT_u32 size, BT_u32 flags",
      "file": "mm/bt_vm.h",
      "line": 70,
      "lineto": 70,
      "comments": "",
      "sig": "struct bt_task *::void **::BT_u32::BT_u32",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_vm_free": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_task *",
          "name": "task",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "addr",
          "comment": ""
        }
      ],
      "argline": "struct bt_task *task, void *addr",
      "file": "mm/bt_vm.h",
      "line": 71,
      "lineto": 71,
      "comments": "",
      "sig": "struct bt_task *::void *",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_pgd_t bt_mmu_newmap": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_vm.h",
      "line": 73,
      "lineto": 73,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "void bt_mmu_terminate": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "bt_pgd_t",
          "name": "pgd",
          "comment": ""
        }
      ],
      "argline": "bt_pgd_t pgd",
      "file": "mm/bt_vm.h",
      "line": 74,
      "lineto": 74,
      "comments": "",
      "sig": "bt_pgd_t",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "void bt_mmu_switch": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "bt_pgd_t",
          "name": "pgd",
          "comment": ""
        }
      ],
      "argline": "bt_pgd_t pgd",
      "file": "mm/bt_vm.h",
      "line": 75,
      "lineto": 75,
      "comments": "",
      "sig": "bt_pgd_t",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "void bt_mmu_flush_tlb": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_vm.h",
      "line": 76,
      "lineto": 76,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_paddr_t bt_mmu_extract": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "bt_pgd_t",
          "name": "pgd",
          "comment": ""
        },
        {
          "type": "",
          "name": "bt_vaddr_t",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        }
      ],
      "argline": "bt_pgd_t pgd, bt_vaddr_t, BT_u32 size",
      "file": "mm/bt_vm.h",
      "line": 77,
      "lineto": 77,
      "comments": "",
      "sig": "bt_pgd_t::::BT_u32",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "void bt_mmu_init": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_mmumap *",
          "name": "mmumap",
          "comment": ""
        }
      ],
      "argline": "struct bt_mmumap *mmumap",
      "file": "mm/bt_vm.h",
      "line": 78,
      "lineto": 78,
      "comments": "",
      "sig": "struct bt_mmumap *",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "void bt_mmu_killmap": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "bt_pgd_t",
          "name": "pgd",
          "comment": ""
        }
      ],
      "argline": "bt_pgd_t pgd",
      "file": "mm/bt_vm.h",
      "line": 79,
      "lineto": 79,
      "comments": "",
      "sig": "bt_pgd_t",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "int bt_mmu_map": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "bt_pgd_t",
          "name": "pgd",
          "comment": ""
        },
        {
          "type": "bt_paddr_t",
          "name": "pa",
          "comment": ""
        },
        {
          "type": "bt_vaddr_t",
          "name": "va",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        },
        {
          "type": "int",
          "name": "type",
          "comment": ""
        }
      ],
      "argline": "bt_pgd_t pgd, bt_paddr_t pa, bt_vaddr_t va, BT_u32 size, int type",
      "file": "mm/bt_vm.h",
      "line": 80,
      "lineto": 80,
      "comments": "",
      "sig": "bt_pgd_t::bt_paddr_t::bt_vaddr_t::BT_u32::int",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_pgd_t bt_mmu_get_kernel_pgd": {
      "description": "",
      "return": {
        "type": "extern",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_vm.h",
      "line": 81,
      "lineto": 81,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "bt_mmu_set_section": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "bt_paddr_t",
          "name": "p",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        },
        {
          "type": "int",
          "name": "type",
          "comment": ""
        }
      ],
      "argline": "bt_paddr_t p, BT_u32 psize, int type",
      "file": "mm/bt_vm.h",
      "line": 84,
      "lineto": 84,
      "comments": "",
      "sig": "bt_paddr_t::BT_u32::int",
      "rawComments": "",
      "group": "mm_bt_vm.h"
    },
    "BT_kMalloc": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulSize",
      "file": "mm/bt_heap.h",
      "line": 4,
      "lineto": 4,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "mm_bt_heap.h"
    },
    "BT_kFree": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "p",
          "comment": ""
        }
      ],
      "argline": "void *p",
      "file": "mm/bt_heap.h",
      "line": 5,
      "lineto": 5,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "mm_bt_heap.h"
    },
    "bt_ioremap": {
      "description": "Maps the specified Physical address into the Kernel's memory space.",
      "return": {
        "type": "void*",
        "comment": "A pointer to the virtual address used to access the mapped physical region.\nNULL if mapping failed."
      },
      "args": [
        {
          "type": "void *",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        }
      ],
      "argline": "void *paddr, BT_u32 size",
      "file": "mm/bt_ioremap.h",
      "line": 19,
      "lineto": 38,
      "comments": "@kernel\n@public\nThe IO mapper remaps any \"physical\" address region into the Kernel's upper virtual address space.\nThat is that the mappings appear above the Kernel's physical PAGE regions.\nThe mappings returned are uncached, and should only be used for MMIO (Memory Mapped IO) like\naccess to peripheral registers etc.\n\n@note\tTo get uncached access to large memory regions, use a coherent memory pool.\n@note\tOn bare-metal configurations (virtual memory is disabled) use of bt_ioremap() simply returns paddr.\n\n@param[in]\tpaddr\tThe Physical address to be remapped.\n@param[in]\tsize\tThe size in bytes of the region that the mapping must contain.",
      "sig": "void *::BT_u32",
      "rawComments": "Maps the specified Physical address into the Kernel's memory space.\n\n@kernel\n@public\nThe IO mapper remaps any \"physical\" address region into the Kernel's upper virtual address space.\nThat is that the mappings appear above the Kernel's physical PAGE regions.\nThe mappings returned are uncached, and should only be used for MMIO (Memory Mapped IO) like\naccess to peripheral registers etc.\n\n@note\tTo get uncached access to large memory regions, use a coherent memory pool.\n@note\tOn bare-metal configurations (virtual memory is disabled) use of bt_ioremap() simply returns paddr.\n\n@param[in]\tpaddr\tThe Physical address to be remapped.\n@param[in]\tsize\tThe size in bytes of the region that the mapping must contain.",
      "group": "mm_bt_ioremap.h"
    },
    "bt_iounmap": {
      "description": "Unmaps the an IO mapping using the given Virtual address (as returned from bt_ioremap).",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "volatile void *",
          "name": "iomem",
          "comment": ""
        }
      ],
      "argline": "volatile void *iomem",
      "file": "mm/bt_ioremap.h",
      "line": 40,
      "lineto": 54,
      "comments": "@kernel\n@public\nAll mappings returned from bt_ioremap() utilise the kernel's limited virtual address space region.\nioremapped regions MUST be free'd after use. Forgetting to unmap is similar to a memory leak.\n\n@note \tOn bare-metal configurations (virtual memory is disabled) use of bt_iounmap() is optimised away.\n\n@param[in]\tiomem\tThe Virtual address of the mapped region to be unmapped.\n\n@void",
      "sig": "volatile void *",
      "rawComments": "Unmaps the an IO mapping using the given Virtual address (as returned from bt_ioremap).\n\n@kernel\n@public\nAll mappings returned from bt_ioremap() utilise the kernel's limited virtual address space region.\nioremapped regions MUST be free'd after use. Forgetting to unmap is similar to a memory leak.\n\n@note \tOn bare-metal configurations (virtual memory is disabled) use of bt_iounmap() is optimised away.\n\n@param[in]\tiomem\tThe Virtual address of the mapped region to be unmapped.\n\n@void",
      "group": "mm_bt_ioremap.h"
    },
    "bt_page_alloc": {
      "description": "Allocates PAGES from the main PAGE pool with complete freedom.",
      "return": {
        "type": "bt_paddr_t",
        "comment": "Physical address of the allocated PAGE(s).\nNULL (0) if allocation fails."
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        }
      ],
      "argline": "BT_u32 psize",
      "file": "mm/bt_page.h",
      "line": 45,
      "lineto": 58,
      "comments": "@kernel\n@public\nThis is the most commonly used PAGE allocator API. It allocates with complete\nfreedom, the only constraint being the specified size (psize).\n\n@param[in]\tpsize\tThe size in bytes that the allocation MUST contain.",
      "sig": "BT_u32",
      "rawComments": "Allocates PAGES from the main PAGE pool with complete freedom.\n\n@kernel\n@public\nThis is the most commonly used PAGE allocator API. It allocates with complete\nfreedom, the only constraint being the specified size (psize).\n\n@param[in]\tpsize\tThe size in bytes that the allocation MUST contain.",
      "group": "mm_bt_page.h"
    },
    "bt_page_alloc_aligned": {
      "description": "Allocates PAGES from the main PAGE pool with constrained alignment.",
      "return": {
        "type": "bt_paddr_t",
        "comment": "Physical address of the allocated PAGE(s).\nNULL (0) if allocation fails."
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "order",
          "comment": ""
        }
      ],
      "argline": "BT_u32 psize, BT_u32 order",
      "file": "mm/bt_page.h",
      "line": 60,
      "lineto": 73,
      "comments": "@kernel\n@public\nThis can be used to allocate pages with a particular alignment.\n\n@param[in]\tpsize\tThe size in bytes that the allocation MUST contain.\n@param[in]\torder\tThe alignment order. (0 = PAGE_ALIGNED, 1 = 2*PAGE_ALIGNED, 2=4*PAGE_ALIGNED etc).",
      "sig": "BT_u32::BT_u32",
      "rawComments": "Allocates PAGES from the main PAGE pool with constrained alignment.\n\n@kernel\n@public\nThis can be used to allocate pages with a particular alignment.\n\n@param[in]\tpsize\tThe size in bytes that the allocation MUST contain.\n@param[in]\torder\tThe alignment order. (0 = PAGE_ALIGNED, 1 = 2*PAGE_ALIGNED, 2=4*PAGE_ALIGNED etc).",
      "group": "mm_bt_page.h"
    },
    "bt_page_free": {
      "description": "Free's PAGES to the main PAGE pool.",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "bt_paddr_t",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        }
      ],
      "argline": "bt_paddr_t paddr, BT_u32 psize",
      "file": "mm/bt_page.h",
      "line": 75,
      "lineto": 87,
      "comments": "@kernel\n@public\nThis is the most commonly used PAGE free API.\n\n@param[in]\tpaddr\tPhysical address of the PAGES to be free'd.\n@param[in] \tpsize\tSize in bytes of the PAGES being free'd\n\n@void",
      "sig": "bt_paddr_t::BT_u32",
      "rawComments": "Free's PAGES to the main PAGE pool.\n\n@kernel\n@public\nThis is the most commonly used PAGE free API.\n\n@param[in]\tpaddr\tPhysical address of the PAGES to be free'd.\n@param[in] \tpsize\tSize in bytes of the PAGES being free'd\n\n@void",
      "group": "mm_bt_page.h"
    },
    "bt_page_reserve": {
      "description": "Reserve's PAGES from the main PAGE pool.",
      "return": {
        "type": "BT_ERROR",
        "comment": "BT_ERR_NONE on success.\nBT_ERR_NO_MEMORY if reservation fails."
      },
      "args": [
        {
          "type": "bt_paddr_t",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        }
      ],
      "argline": "bt_paddr_t paddr, BT_u32 psize",
      "file": "mm/bt_page.h",
      "line": 89,
      "lineto": 100,
      "comments": "@kernel\n@public\n@param[in]\tpaddr\tPhysical address of the PAGES to be reserved.\n@param[in]\tpsize\tSize in bytes that the reservation must contain. (Rounded up to BT_PAGE_SIZE internally).",
      "sig": "bt_paddr_t::BT_u32",
      "rawComments": "Reserve's PAGES from the main PAGE pool.\n\n@kernel\n@public\n@param[in]\tpaddr\tPhysical address of the PAGES to be reserved.\n@param[in]\tpsize\tSize in bytes that the reservation must contain. (Rounded up to BT_PAGE_SIZE internally).",
      "group": "mm_bt_page.h"
    },
    "bt_page_alloc_coherent": {
      "description": "Allocates PAGES from the coherent PAGE pool.",
      "return": {
        "type": "bt_paddr_t",
        "comment": "Physical address of the allocated PAGE(s).\nNULL (0) if allocation fails."
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        }
      ],
      "argline": "BT_u32 psize",
      "file": "mm/bt_page.h",
      "line": 103,
      "lineto": 113,
      "comments": "@kernel\n@public\n@param[in]\tpsize\tThe size in bytes that the allocation MUST contain.",
      "sig": "BT_u32",
      "rawComments": "Allocates PAGES from the coherent PAGE pool.\n\n@kernel\n@public\n@param[in]\tpsize\tThe size in bytes that the allocation MUST contain.",
      "group": "mm_bt_page.h"
    },
    "bt_page_free_coherent": {
      "description": "Free's PAGES to the coherent PAGE pool.",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "bt_paddr_t",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        }
      ],
      "argline": "bt_paddr_t paddr, BT_u32 psize",
      "file": "mm/bt_page.h",
      "line": 115,
      "lineto": 125,
      "comments": "@kernel\n@public\n@param[in]\tpaddr\tPhysical address of the PAGES to be free'd.\n@param[in]\tpsize\tSize in bytes of the PAGES being free'd.\n\n@void",
      "sig": "bt_paddr_t::BT_u32",
      "rawComments": "Free's PAGES to the coherent PAGE pool.\n\n@kernel\n@public\n@param[in]\tpaddr\tPhysical address of the PAGES to be free'd.\n@param[in]\tpsize\tSize in bytes of the PAGES being free'd.\n\n@void",
      "group": "mm_bt_page.h"
    },
    "bt_page_reserve_coherent": {
      "description": "Reserve's PAGES from the coherent PAGE pool.",
      "return": {
        "type": "BT_ERROR",
        "comment": "BT_ERR_NONE on success.\nBT_ERR_NO_MEMORY if reservation fails."
      },
      "args": [
        {
          "type": "bt_paddr_t",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        }
      ],
      "argline": "bt_paddr_t paddr, BT_u32 psize",
      "file": "mm/bt_page.h",
      "line": 127,
      "lineto": 138,
      "comments": "@kernel\n@public\n@param[in]\tpaddr\tPhysical address of the PAGES to be reserved.\n@param[in]\tpsize\tSize in bytes that reservation must contain. (Rounded up to BT_PAGE_SIZE internally).",
      "sig": "bt_paddr_t::BT_u32",
      "rawComments": "Reserve's PAGES from the coherent PAGE pool.\n\n@kernel\n@public\n@param[in]\tpaddr\tPhysical address of the PAGES to be reserved.\n@param[in]\tpsize\tSize in bytes that reservation must contain. (Rounded up to BT_PAGE_SIZE internally).",
      "group": "mm_bt_page.h"
    },
    "bt_page_info": {
      "description": "Get Information on the current state of the PAGE manager.",
      "return": {
        "type": "BT_ERROR",
        "comment": "BT_ERR_NONE on success."
      },
      "args": [
        {
          "type": "struct bt_page_info *",
          "name": "pInfo",
          "comment": ""
        }
      ],
      "argline": "struct bt_page_info *pInfo",
      "file": "mm/bt_page.h",
      "line": 141,
      "lineto": 150,
      "comments": "@kernel\n@public\n@param[out]\tpInfo\tA pointer to a struct bt_page_info to be filled with the current state.",
      "sig": "struct bt_page_info *",
      "rawComments": "Get Information on the current state of the PAGE manager.\n\n@kernel\n@public\n@param[out]\tpInfo\tA pointer to a struct bt_page_info to be filled with the current state.",
      "group": "mm_bt_page.h"
    },
    "bt_page_pool_init": {
      "description": "Initialise a PAGE pool.",
      "return": {
        "type": "BT_ERROR",
        "comment": "BT_ERR_NONE on sucess."
      },
      "args": [
        {
          "type": "struct bt_page_pool *",
          "name": "pool",
          "comment": ""
        }
      ],
      "argline": "struct bt_page_pool *pool",
      "file": "mm/bt_page.h",
      "line": 152,
      "lineto": 163,
      "comments": "@kernel\n@public\nInitialises a @ref (struct bt_page_pool) object with 0 attached pages of memory.\n\n@param[in]\tpool\tPAGE pool object to be initialised.",
      "sig": "struct bt_page_pool *",
      "rawComments": "Initialise a PAGE pool.\n\n@kernel\n@public\nInitialises a @ref (struct bt_page_pool) object with 0 attached pages of memory.\n\n@param[in]\tpool\tPAGE pool object to be initialised.",
      "group": "mm_bt_page.h"
    },
    "bt_page_pool_alloc": {
      "description": "Allocates some pages from a PAGE pool.",
      "return": {
        "type": "bt_paddr_t",
        "comment": "A physical PAGE address if allocation succeeds.\nNULL (0) if allocation fails."
      },
      "args": [
        {
          "type": "struct bt_page_pool *",
          "name": "pool",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "order",
          "comment": ""
        }
      ],
      "argline": "struct bt_page_pool *pool, BT_u32 psize, BT_u32 order",
      "file": "mm/bt_page.h",
      "line": 165,
      "lineto": 177,
      "comments": "@kernel\n@public\n@param[in]\tpool\tPAGE pool to allocate pages from.\n@param[in]\tpsize\tSize in bytes the allocation should atleast contain. (Rounded up to BT_PAGE_SIZE internally).\n@param[in]\torder\tThe alignment order. (0 = PAGE_ALIGNED, 1 = 2*PAGE_ALIGNED, 2=4*PAGE_ALIGNED etc).",
      "sig": "struct bt_page_pool *::BT_u32::BT_u32",
      "rawComments": "Allocates some pages from a PAGE pool.\n\n@kernel\n@public\n@param[in]\tpool\tPAGE pool to allocate pages from.\n@param[in]\tpsize\tSize in bytes the allocation should atleast contain. (Rounded up to BT_PAGE_SIZE internally).\n@param[in]\torder\tThe alignment order. (0 = PAGE_ALIGNED, 1 = 2*PAGE_ALIGNED, 2=4*PAGE_ALIGNED etc).",
      "group": "mm_bt_page.h"
    },
    "bt_page_pool_free": {
      "description": "Free's an allocation into the specified PAGE pool.",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_page_pool *",
          "name": "pool",
          "comment": ""
        },
        {
          "type": "bt_paddr_t",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        }
      ],
      "argline": "struct bt_page_pool *pool, bt_paddr_t paddr, BT_u32 size",
      "file": "mm/bt_page.h",
      "line": 179,
      "lineto": 195,
      "comments": "@kernel\n@public\nPlaces memory back onto the specified PAGE pool.\n\n@warn The API does not ensure that pages are being placed back into the same PAGE pool from whence they were allocated.\n@warn The correct way to \"migrate\" pages is to reserve them in the originating PAGE pool, and attach them to another pool.\n\n@param[in]\tpool\tPAGE pool to free the memory into.\n@param[in]\tpaddr\tPhysical address of the pages to be free'd.\n@param[in]\tsize\tSize in bytes of the pages being free'd. (Rounded up to BT_PAGE_SIZE internally).\n\n@void",
      "sig": "struct bt_page_pool *::bt_paddr_t::BT_u32",
      "rawComments": "Free's an allocation into the specified PAGE pool.\n\n@kernel\n@public\nPlaces memory back onto the specified PAGE pool.\n\n@warn The API does not ensure that pages are being placed back into the same PAGE pool from whence they were allocated.\n@warn The correct way to \"migrate\" pages is to reserve them in the originating PAGE pool, and attach them to another pool.\n\n@param[in]\tpool\tPAGE pool to free the memory into.\n@param[in]\tpaddr\tPhysical address of the pages to be free'd.\n@param[in]\tsize\tSize in bytes of the pages being free'd. (Rounded up to BT_PAGE_SIZE internally).\n\n@void",
      "group": "mm_bt_page.h"
    },
    "bt_page_pool_attach": {
      "description": "Attaches some PAGES to the specified PAGE pool.",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_page_pool *",
          "name": "pool",
          "comment": ""
        },
        {
          "type": "bt_paddr_t",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        }
      ],
      "argline": "struct bt_page_pool *pool, bt_paddr_t paddr, BT_u32 size",
      "file": "mm/bt_page.h",
      "line": 197,
      "lineto": 211,
      "comments": "@kernel\n@public\nThe difference between pool_free and pool_attach is that attach operations initialise / update\nthe PAGE pool's information on how much memory is available or in use.\n\n@param[in]\tpool\tPAGE pool to attach the memory to.\n@param[in]\tpaddr\tPhysical address of the pages to be attached.\n@param[in]\tsize\tSize in bytes of the pages being attached. (Rounded up to BT_PAGE_SIZE internally).\n\n@void",
      "sig": "struct bt_page_pool *::bt_paddr_t::BT_u32",
      "rawComments": "Attaches some PAGES to the specified PAGE pool.\n\n@kernel\n@public\nThe difference between pool_free and pool_attach is that attach operations initialise / update\nthe PAGE pool's information on how much memory is available or in use.\n\n@param[in]\tpool\tPAGE pool to attach the memory to.\n@param[in]\tpaddr\tPhysical address of the pages to be attached.\n@param[in]\tsize\tSize in bytes of the pages being attached. (Rounded up to BT_PAGE_SIZE internally).\n\n@void",
      "group": "mm_bt_page.h"
    },
    "bt_page_pool_reserve": {
      "description": "Reserves some PAGES from the specified PAGE pool.",
      "return": {
        "type": "BT_ERROR",
        "comment": "BT_ERR_NONE on success.\nBT_ERR_NO_MEMORY if reservation fails."
      },
      "args": [
        {
          "type": "struct bt_page_pool *",
          "name": "pool",
          "comment": ""
        },
        {
          "type": "bt_paddr_t",
          "name": "paddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "psize",
          "comment": ""
        }
      ],
      "argline": "struct bt_page_pool *pool, bt_paddr_t paddr, BT_u32 psize",
      "file": "mm/bt_page.h",
      "line": 213,
      "lineto": 229,
      "comments": "@kernel\n@public\nReserves a linear region within a PAGE pool. After this operation it is expected that the\nmemory will never be returned to the PAGE pool. This is not meant to be used as an allocation\nmethod, but to remove e.g. PAGES containing Kernel data or code from a PAGE pool.\n\n@param[in]\tpool\tPAGE pool to reserve memory from.\n@param[in]\tpaddr\tPhysical address of the PAGES to be attached.\n@param[in]\tpsize\tSize in bytes of the pages to be reserved. (Rounded up to BT_PAGE_SIZE internally).",
      "sig": "struct bt_page_pool *::bt_paddr_t::BT_u32",
      "rawComments": "Reserves some PAGES from the specified PAGE pool.\n\n@kernel\n@public\nReserves a linear region within a PAGE pool. After this operation it is expected that the\nmemory will never be returned to the PAGE pool. This is not meant to be used as an allocation\nmethod, but to remove e.g. PAGES containing Kernel data or code from a PAGE pool.\n\n@param[in]\tpool\tPAGE pool to reserve memory from.\n@param[in]\tpaddr\tPhysical address of the PAGES to be attached.\n@param[in]\tpsize\tSize in bytes of the pages to be reserved. (Rounded up to BT_PAGE_SIZE internally).",
      "group": "mm_bt_page.h"
    },
    "bt_initialise_pages": {
      "description": "Initialises the PAGE manager, and creates the default PAGE pools.",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_page.h",
      "line": 231,
      "lineto": 237,
      "comments": "@kernel\n@private",
      "sig": "",
      "rawComments": "Initialises the PAGE manager, and creates the default PAGE pools.\n\n@kernel\n@private",
      "group": "mm_bt_page.h"
    },
    "bt_initialise_pages_second_stage": {
      "description": "Initialises the PAGE manager's MUTEX.",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_page.h",
      "line": 239,
      "lineto": 250,
      "comments": "@kernel\n@private\n\nThis is done separately because there is a short period of time where the PAGE\nmanager is required, but MUTEX's cannot be used.\n\n@future\tHopefully this requirement can be removed in the future.",
      "sig": "",
      "rawComments": "Initialises the PAGE manager's MUTEX.\n\n@kernel\n@private\n\nThis is done separately because there is a short period of time where the PAGE\nmanager is required, but MUTEX's cannot be used.\n\n@future\tHopefully this requirement can be removed in the future.",
      "group": "mm_bt_page.h"
    },
    "bt_initialise_coherent_pages": {
      "description": "Initialises the Kernel's coherent PAGE pool.",
      "return": {
        "type": "bt_paddr_t",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "mm/bt_page.h",
      "line": 252,
      "lineto": 258,
      "comments": "@kernel\n@private",
      "sig": "",
      "rawComments": "Initialises the Kernel's coherent PAGE pool.\n\n@kernel\n@private",
      "group": "mm_bt_page.h"
    },
    "bt_slab_info": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_slab_info *",
          "name": "pInfo",
          "comment": ""
        }
      ],
      "argline": "struct bt_slab_info *pInfo",
      "file": "mm/slab.h",
      "line": 24,
      "lineto": 24,
      "comments": "",
      "sig": "struct bt_slab_info *",
      "rawComments": "",
      "group": "mm_slab.h"
    },
    "bt_initialise_slab": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "mm/slab.h",
      "line": 26,
      "lineto": 26,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "mm_slab.h"
    },
    "bt_initialise_slab_second_stage": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "mm/slab.h",
      "line": 27,
      "lineto": 27,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "mm_slab.h"
    },
    "BT_CacheInit": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_CACHE *",
          "name": "pCache",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulCacheSize",
          "comment": ""
        }
      ],
      "argline": "BT_CACHE *pCache, BT_u32 ulCacheSize",
      "file": "mm/slab.h",
      "line": 29,
      "lineto": 29,
      "comments": "",
      "sig": "BT_CACHE *::BT_u32",
      "rawComments": "",
      "group": "mm_slab.h"
    },
    "BT_CacheAlloc": {
      "description": "",
      "return": {
        "type": "void*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_CACHE *",
          "name": "pCache",
          "comment": ""
        }
      ],
      "argline": "BT_CACHE *pCache",
      "file": "mm/slab.h",
      "line": 30,
      "lineto": 30,
      "comments": "",
      "sig": "BT_CACHE *",
      "rawComments": "",
      "group": "mm_slab.h"
    },
    "BT_CacheFree": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_CACHE *",
          "name": "pCache",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "p",
          "comment": ""
        }
      ],
      "argline": "BT_CACHE *pCache, void *p",
      "file": "mm/slab.h",
      "line": 31,
      "lineto": 31,
      "comments": "",
      "sig": "BT_CACHE *::void *",
      "rawComments": "",
      "group": "mm_slab.h"
    },
    "BT_GetTotalDevicesByType": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_DEVICE_TYPE",
          "name": "eType",
          "comment": ""
        }
      ],
      "argline": "BT_DEVICE_TYPE eType",
      "file": "devman/bt_device.h",
      "line": 67,
      "lineto": 67,
      "comments": "",
      "sig": "BT_DEVICE_TYPE",
      "rawComments": "",
      "group": "devman_bt_device.h"
    },
    "BT_DEVICE    BT_GetDeviceByType": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_DEVICE_TYPE",
          "name": "eType",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulIndex",
          "comment": ""
        }
      ],
      "argline": "BT_DEVICE_TYPE eType, BT_u32 ulIndex",
      "file": "devman/bt_device.h",
      "line": 68,
      "lineto": 68,
      "comments": "",
      "sig": "BT_DEVICE_TYPE::BT_u32",
      "rawComments": "",
      "group": "devman_bt_device.h"
    },
    "BT_RESOURCE  BT_GetDeviceResource": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_DEVICE *",
          "name": "pDevice",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulType",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulNum",
          "comment": ""
        }
      ],
      "argline": "const BT_DEVICE *pDevice, BT_u32 ulType, BT_u32 ulNum",
      "file": "devman/bt_device.h",
      "line": 69,
      "lineto": 69,
      "comments": "",
      "sig": "const BT_DEVICE *::BT_u32::BT_u32",
      "rawComments": "",
      "group": "devman_bt_device.h"
    },
    "mtd_erase_callback": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFlash",
          "comment": ""
        },
        {
          "type": "BT_MTD_ERASE_INFO *",
          "name": "instr",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFlash, BT_MTD_ERASE_INFO *instr",
      "file": "devman/bt_mtd.h",
      "line": 137,
      "lineto": 141,
      "comments": "Define the unified API for SPI devices in BitThunder",
      "sig": "BT_HANDLE::BT_MTD_ERASE_INFO *",
      "rawComments": "Define the unified API for SPI devices in BitThunder",
      "group": "devman_bt_mtd.h"
    },
    "BT_MTD_RegisterDevice": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "szpName",
          "comment": ""
        },
        {
          "type": "BT_MTD_INFO *",
          "name": "mtd",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice, const BT_i8 *szpName, BT_MTD_INFO *mtd",
      "file": "devman/bt_mtd.h",
      "line": 143,
      "lineto": 143,
      "comments": "",
      "sig": "BT_HANDLE::const BT_i8 *::BT_MTD_INFO *",
      "rawComments": "",
      "group": "devman_bt_mtd.h"
    },
    "BT_MTD_Erase": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMTD",
          "comment": ""
        },
        {
          "type": "BT_MTD_ERASE_INFO *",
          "name": "instr",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMTD, BT_MTD_ERASE_INFO *instr",
      "file": "devman/bt_mtd.h",
      "line": 144,
      "lineto": 144,
      "comments": "",
      "sig": "BT_HANDLE::BT_MTD_ERASE_INFO *",
      "rawComments": "",
      "group": "devman_bt_mtd.h"
    },
    "BT_MTD_Read": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMTD",
          "comment": ""
        },
        {
          "type": "BT_u64",
          "name": "from",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        },
        {
          "type": "BT_u8 *",
          "name": "buf",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMTD, BT_u64 from, BT_u32 len, BT_u8 *buf",
      "file": "devman/bt_mtd.h",
      "line": 145,
      "lineto": 145,
      "comments": "",
      "sig": "BT_HANDLE::BT_u64::BT_u32::BT_u8 *",
      "rawComments": "",
      "group": "devman_bt_mtd.h"
    },
    "BT_MTD_Write": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMTD",
          "comment": ""
        },
        {
          "type": "BT_u64",
          "name": "to",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        },
        {
          "type": "const BT_u8 *",
          "name": "buf",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMTD, BT_u64 to, BT_u32 len, const BT_u8 *buf",
      "file": "devman/bt_mtd.h",
      "line": 146,
      "lineto": 146,
      "comments": "",
      "sig": "BT_HANDLE::BT_u64::BT_u32::const BT_u8 *",
      "rawComments": "",
      "group": "devman_bt_mtd.h"
    },
    "BT_MTD_GetUserInfo": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMTD",
          "comment": ""
        },
        {
          "type": "BT_MTD_USER_INFO *",
          "name": "info",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMTD, BT_MTD_USER_INFO * info",
      "file": "devman/bt_mtd.h",
      "line": 147,
      "lineto": 147,
      "comments": "",
      "sig": "BT_HANDLE::BT_MTD_USER_INFO *",
      "rawComments": "",
      "group": "devman_bt_mtd.h"
    },
    "BT_RegisterBlockDevice": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        },
        {
          "type": "const char *",
          "name": "szpName",
          "comment": ""
        },
        {
          "type": "BT_BLKDEV_DESCRIPTOR *",
          "name": "pDescriptor",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice, const char *szpName, BT_BLKDEV_DESCRIPTOR *pDescriptor",
      "file": "devman/bt_block.h",
      "line": 31,
      "lineto": 31,
      "comments": "",
      "sig": "BT_HANDLE::const char *::BT_BLKDEV_DESCRIPTOR *",
      "rawComments": "",
      "group": "devman_bt_block.h"
    },
    "BT_BlockRead": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hBlock",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulAddress",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulBlocks",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hBlock, BT_u32 ulAddress, BT_u32 ulBlocks, void *pBuffer",
      "file": "devman/bt_block.h",
      "line": 33,
      "lineto": 33,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::void *",
      "rawComments": "",
      "group": "devman_bt_block.h"
    },
    "BT_BlockWrite": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hBlock",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulAddress",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulBlocks",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hBlock, BT_u32 ulAddress, BT_u32 ulBlocks, void *pBuffer",
      "file": "devman/bt_block.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::void *",
      "rawComments": "",
      "group": "devman_bt_block.h"
    },
    "BT_GetBlockGeometry": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hBlock",
          "comment": ""
        },
        {
          "type": "BT_BLOCK_GEOMETRY *",
          "name": "pGeometry",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hBlock, BT_BLOCK_GEOMETRY *pGeometry",
      "file": "devman/bt_block.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "BT_HANDLE::BT_BLOCK_GEOMETRY *",
      "rawComments": "",
      "group": "devman_bt_block.h"
    },
    "BT_BlockGetInode": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice",
      "file": "devman/bt_block.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "devman_bt_block.h"
    },
    "BT_RESOURCE BT_GetResource": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_RESOURCE *",
          "name": "pResources",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulTotalResources",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulType",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulNum",
          "comment": ""
        }
      ],
      "argline": "const BT_RESOURCE *pResources, BT_u32 ulTotalResources, BT_u32 ulType, BT_u32 ulNum",
      "file": "devman/bt_resource.h",
      "line": 43,
      "lineto": 43,
      "comments": "",
      "sig": "const BT_RESOURCE *::BT_u32::BT_u32::BT_u32",
      "rawComments": "",
      "group": "devman_bt_resource.h"
    },
    "BT_I2C_RegisterBus": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_I2C_BUS *",
          "name": "pBus",
          "comment": ""
        }
      ],
      "argline": "BT_I2C_BUS *pBus",
      "file": "devman/bt_i2c.h",
      "line": 48,
      "lineto": 48,
      "comments": "",
      "sig": "BT_I2C_BUS *",
      "rawComments": "",
      "group": "devman_bt_i2c.h"
    },
    "BT_I2C_GetBusByID": {
      "description": "",
      "return": {
        "type": "BT_I2C_BUS*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulID",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulID",
      "file": "devman/bt_i2c.h",
      "line": 50,
      "lineto": 50,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "devman_bt_i2c.h"
    },
    "BT_I2C_GetBusObject": {
      "description": "",
      "return": {
        "type": "BT_I2C_BUS*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hBus",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hBus",
      "file": "devman/bt_i2c.h",
      "line": 52,
      "lineto": 52,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "devman_bt_i2c.h"
    },
    "const BT_IF_HANDLE \t   ": {
      "description": "",
      "return": {
        "type": "typedef*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*BT_MODULE_GETIF_FN",
          "comment": ""
        }
      ],
      "argline": "*BT_MODULE_GETIF_FN",
      "file": "devman/bt_devman.h",
      "line": 1,
      "lineto": 17,
      "comments": "BlueThunder - Device Manager",
      "sig": "",
      "rawComments": "BlueThunder - Device Manager",
      "group": "devman_bt_devman.h"
    },
    "BT_GetMachineDescription": {
      "description": "",
      "return": {
        "type": "BT_MACHINE_DESCRIPTION*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_ERROR *pError",
      "file": "devman/bt_devman.h",
      "line": 27,
      "lineto": 31,
      "comments": "#define BT_MODULE_ENTRY(entry) \t\t   BT_ATTRIBUTE_SECTION(\".bt.module.entries\") \t\\\nstatic const BT_MODULE_ENTRY_DESCRIPTOR *pModuleEntry = &entry;*/",
      "sig": "BT_ERROR *",
      "rawComments": "#define BT_MODULE_ENTRY(entry) \t\t   BT_ATTRIBUTE_SECTION(\".bt.module.entries\") \t\\\nstatic const BT_MODULE_ENTRY_DESCRIPTOR *pModuleEntry = &entry;*/",
      "group": "devman_bt_devman.h"
    },
    "BT_GetTotalIntegratedDriversByType": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_DRIVER_TYPE",
          "name": "eType",
          "comment": ""
        }
      ],
      "argline": "BT_DRIVER_TYPE eType",
      "file": "devman/bt_devman.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "BT_DRIVER_TYPE",
      "rawComments": "",
      "group": "devman_bt_devman.h"
    },
    "BT_GetIntegratedDriverByType": {
      "description": "",
      "return": {
        "type": "BT_INTEGRATED_DRIVER*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_DRIVER_TYPE",
          "name": "eType",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "i",
          "comment": ""
        }
      ],
      "argline": "BT_DRIVER_TYPE eType, BT_u32 i",
      "file": "devman/bt_devman.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "BT_DRIVER_TYPE::BT_u32",
      "rawComments": "",
      "group": "devman_bt_devman.h"
    },
    "BT_ProbeIntegratedDevices": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hLogDevice",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hLogDevice",
      "file": "devman/bt_devman.h",
      "line": 37,
      "lineto": 37,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "devman_bt_devman.h"
    },
    "BT_RESOURCE BT_GetIntegratedResource": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_INTEGRATED_DEVICE *",
          "name": "pDevice",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulType",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulNum",
          "comment": ""
        }
      ],
      "argline": "const BT_INTEGRATED_DEVICE *pDevice, BT_u32 ulType, BT_u32 ulNum",
      "file": "devman/bt_integrated_device.h",
      "line": 11,
      "lineto": 17,
      "comments": "} BT_INTEGRATED_DEVICE;*/",
      "sig": "const BT_INTEGRATED_DEVICE *::BT_u32::BT_u32",
      "rawComments": "} BT_INTEGRATED_DEVICE;*/",
      "group": "devman_bt_integrated_device.h"
    },
    "eType;\t\t\t\t\t\t\t union { BT_HANDLE": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnProbe",
          "comment": ""
        }
      ],
      "argline": "*pfnProbe",
      "file": "devman/bt_driver.h",
      "line": 21,
      "lineto": 26,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "devman_bt_driver.h"
    },
    "struct { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnErase",
          "comment": ""
        }
      ],
      "argline": "*pfnErase",
      "file": "interfaces/bt_dev_if_mtd.h",
      "line": 20,
      "lineto": 21,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mtd.h"
    },
    "BT_UartSetBaudrate": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hUart",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulBaudrate",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hUart, BT_u32 ulBaudrate",
      "file": "interfaces/bt_dev_if_uart.h",
      "line": 52,
      "lineto": 55,
      "comments": "Define the unified API for UART devices in BlueThunder",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "Define the unified API for UART devices in BlueThunder",
      "group": "interfaces_bt_dev_if_uart.h"
    },
    "BT_UartSetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hUart",
          "comment": ""
        },
        {
          "type": "BT_UART_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hUart, BT_UART_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_uart.h",
      "line": 56,
      "lineto": 56,
      "comments": "",
      "sig": "BT_HANDLE::BT_UART_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_uart.h"
    },
    "BT_UartGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hUart",
          "comment": ""
        },
        {
          "type": "BT_UART_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hUart, BT_UART_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_uart.h",
      "line": 57,
      "lineto": 57,
      "comments": "",
      "sig": "BT_HANDLE::BT_UART_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_uart.h"
    },
    "BT_UartEnable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hUart",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hUart",
      "file": "interfaces/bt_dev_if_uart.h",
      "line": 58,
      "lineto": 58,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_uart.h"
    },
    "BT_UartDisable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hUart",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hUart",
      "file": "interfaces/bt_dev_if_uart.h",
      "line": 59,
      "lineto": 59,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_uart.h"
    },
    "struct _BT_DEV_IF_PWM { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSetConfig",
          "comment": ""
        }
      ],
      "argline": "*pfnSetConfig",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 12,
      "lineto": 13,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmStart": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 26,
      "lineto": 26,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmStop": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 27,
      "lineto": 27,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmSetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_PWM_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_PWM_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 29,
      "lineto": 29,
      "comments": "",
      "sig": "BT_HANDLE::BT_PWM_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_PWM_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_PWM_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 30,
      "lineto": 30,
      "comments": "",
      "sig": "BT_HANDLE::BT_PWM_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmGetPeriodCount": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmSetFrequency": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFrequencyHz",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_u32 ulFrequencyHz",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 33,
      "lineto": 33,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmGetFrequency": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmGetDutyCylce": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_u32 ulChannel, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmSetDutyCycle": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulValue",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_u32 ulChannel, BT_u32 ulValue",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 37,
      "lineto": 37,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmGetDeadTime": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_u32 ulChannel, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 39,
      "lineto": 39,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "BT_PwmSetDeadTime": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulValue",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hPwm, BT_u32 ulChannel, BT_u32 ulValue",
      "file": "interfaces/bt_dev_if_pwm.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_pwm.h"
    },
    "struct _BT_DEV_IF_ADC { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSetConfig",
          "comment": ""
        }
      ],
      "argline": "*pfnSetConfig",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 31,
      "lineto": 32,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "BT_AdcStart": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hAdc",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hAdc",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 41,
      "lineto": 41,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "BT_AdcStop": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hAdc",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hAdc",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 42,
      "lineto": 42,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "BT_AdcSetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hAdc",
          "comment": ""
        },
        {
          "type": "BT_ADC_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hAdc, BT_ADC_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 44,
      "lineto": 44,
      "comments": "",
      "sig": "BT_HANDLE::BT_ADC_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "BT_AdcGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hAdc",
          "comment": ""
        },
        {
          "type": "BT_ADC_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hAdc, BT_ADC_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 45,
      "lineto": 45,
      "comments": "",
      "sig": "BT_HANDLE::BT_ADC_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "BT_AdcRegisterCallback": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hAdc",
          "comment": ""
        },
        {
          "type": "BT_ADC_CALLBACK",
          "name": "pfnCallback",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pParam",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hAdc, BT_ADC_CALLBACK pfnCallback, void *pParam, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 47,
      "lineto": 47,
      "comments": "",
      "sig": "BT_HANDLE::BT_ADC_CALLBACK::void *::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "BT_AdcUnregisterCallback": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hAdc",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "hCallback",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hAdc, BT_HANDLE hCallback",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 48,
      "lineto": 48,
      "comments": "",
      "sig": "BT_HANDLE::BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "BT_AdcRead": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hAdc",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        },
        {
          "type": "BT_u32 *",
          "name": "pucDest",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hAdc, BT_u32 ulChannel, BT_u32 ulSize, BT_u32 *pucDest",
      "file": "interfaces/bt_dev_if_adc.h",
      "line": 50,
      "lineto": 50,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::BT_u32 *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_adc.h"
    },
    "struct _BT_DEV_IF_GPIO { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSet",
          "comment": ""
        }
      ],
      "argline": "*pfnSet",
      "file": "interfaces/bt_dev_if_gpio.h",
      "line": 6,
      "lineto": 7,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_gpio.h"
    },
    "struct _BT_DEV_IF_RTC { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSetTime",
          "comment": ""
        }
      ],
      "argline": "*pfnSetTime",
      "file": "interfaces/bt_dev_if_rtc.h",
      "line": 16,
      "lineto": 17,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_rtc.h"
    },
    "BT_SpiRegisterMaster": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMaster",
          "comment": ""
        },
        {
          "type": "BT_SPI_MASTER *",
          "name": "pMaster",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMaster, BT_SPI_MASTER *pMaster",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 82,
      "lineto": 85,
      "comments": "Define the unified API for SPI devices in BitThunder",
      "sig": "BT_HANDLE::BT_SPI_MASTER *",
      "rawComments": "Define the unified API for SPI devices in BitThunder",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiMessageInit": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_MESSAGE *",
          "name": "pMessage",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_MESSAGE *pMessage",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 86,
      "lineto": 86,
      "comments": "",
      "sig": "BT_SPI_MESSAGE *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiMessageAddTail": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_TRANSFER *",
          "name": "pTransfer",
          "comment": ""
        },
        {
          "type": "BT_SPI_MESSAGE *",
          "name": "pMessage",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_TRANSFER *pTransfer, BT_SPI_MESSAGE *pMessage",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 87,
      "lineto": 87,
      "comments": "",
      "sig": "BT_SPI_TRANSFER *::BT_SPI_MESSAGE *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiTransferDel": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_TRANSFER *",
          "name": "pTransfer",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_TRANSFER *pTransfer",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 88,
      "lineto": 88,
      "comments": "",
      "sig": "BT_SPI_TRANSFER *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiSetup": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_DEVICE *",
          "name": "pDevice",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_DEVICE *pDevice",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 89,
      "lineto": 89,
      "comments": "",
      "sig": "BT_SPI_DEVICE *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiSync": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_DEVICE *",
          "name": "pDevice",
          "comment": ""
        },
        {
          "type": "BT_SPI_MESSAGE *",
          "name": "pMessage",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_DEVICE *pDevice, BT_SPI_MESSAGE *pMessage",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 90,
      "lineto": 90,
      "comments": "",
      "sig": "BT_SPI_DEVICE *::BT_SPI_MESSAGE *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiBusLock": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_MASTER *",
          "name": "pMaster",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_MASTER *pMaster",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 91,
      "lineto": 91,
      "comments": "",
      "sig": "BT_SPI_MASTER *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiBusUnlock": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_MASTER *",
          "name": "pMaster",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_MASTER *pMaster",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 92,
      "lineto": 92,
      "comments": "",
      "sig": "BT_SPI_MASTER *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiWrite": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_DEVICE *",
          "name": "pDevice",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "buf",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_DEVICE *pDevice, const void *buf, BT_u32 len",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 94,
      "lineto": 94,
      "comments": "",
      "sig": "BT_SPI_DEVICE *::const void *::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiRead": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_DEVICE *",
          "name": "pDevice",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "buf",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_DEVICE *pDevice, void *buf, BT_u32 len",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 95,
      "lineto": 95,
      "comments": "",
      "sig": "BT_SPI_DEVICE *::void *::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "BT_SpiWriteThenRead": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_SPI_DEVICE *",
          "name": "pDevice",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "txbuf",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "n_tx",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "rxbuf",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "n_rx",
          "comment": ""
        }
      ],
      "argline": "BT_SPI_DEVICE *pDevice, const void *txbuf, BT_u32 n_tx, void *rxbuf, BT_u32 n_rx",
      "file": "interfaces/bt_dev_if_spi.h",
      "line": 96,
      "lineto": 96,
      "comments": "",
      "sig": "BT_SPI_DEVICE *::const void *::BT_u32::void *::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_spi.h"
    },
    "struct _BT_DEV_IF_QEI { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSetConfig",
          "comment": ""
        }
      ],
      "argline": "*pfnSetConfig",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 32,
      "lineto": 33,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEISetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_QEI_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_QEI_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 47,
      "lineto": 47,
      "comments": "",
      "sig": "BT_HANDLE::BT_QEI_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_QEI_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_QEI_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 48,
      "lineto": 48,
      "comments": "",
      "sig": "BT_HANDLE::BT_QEI_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIGetIndexCount": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 50,
      "lineto": 50,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIGetPosition": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 51,
      "lineto": 51,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEISetMaximumPosition": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulValue",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_u32 ulValue",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 52,
      "lineto": 52,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEISetPositionComparator": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulValue",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_u32 ulChannel, BT_u32 ulValue",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 53,
      "lineto": 53,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIGetVelocity": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 55,
      "lineto": 55,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIEnableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulType",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_u32 ulType",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 57,
      "lineto": 57,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIDisableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulType",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_u32 ulType",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 58,
      "lineto": 58,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIClearInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulType",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_u32 ulType",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 59,
      "lineto": 59,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIRegisterCallback": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_QEI_CALLBACK",
          "name": "pfnCallback",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pParam",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulInterruptID",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_QEI_CALLBACK pfnCallback, void *pParam, BT_u32 ulInterruptID, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 60,
      "lineto": 60,
      "comments": "",
      "sig": "BT_HANDLE::BT_QEI_CALLBACK::void *::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "BT_QEIUnregisterCallback": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hQEI",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "hCallback",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hQEI, BT_HANDLE hCallback",
      "file": "interfaces/bt_dev_if_qei.h",
      "line": 61,
      "lineto": 61,
      "comments": "",
      "sig": "BT_HANDLE::BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_qei.h"
    },
    "{ BT_HANDLE": {
      "description": "",
      "return": {
        "type": "union",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnMount",
          "comment": ""
        }
      ],
      "argline": "*pfnMount",
      "file": "interfaces/bt_if_fs.h",
      "line": 13,
      "lineto": 14,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_fs.h"
    },
    "struct _BT_DEV_IF_MCPWM { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSetConfig",
          "comment": ""
        }
      ],
      "argline": "*pfnSetConfig",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 49,
      "lineto": 50,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmStart": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_u32 ulChannel",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 61,
      "lineto": 61,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmStop": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_u32 ulChannel",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 62,
      "lineto": 62,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmSetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_MCPWM_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_MCPWM_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 64,
      "lineto": 64,
      "comments": "",
      "sig": "BT_HANDLE::BT_MCPWM_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_MCPWM_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_MCPWM_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 65,
      "lineto": 65,
      "comments": "",
      "sig": "BT_HANDLE::BT_MCPWM_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmGetChannelConfig": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_MCPWM_CHANNEL_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_u32 ulChannel, BT_MCPWM_CHANNEL_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 67,
      "lineto": 67,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_MCPWM_CHANNEL_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmSetChannelConfig": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_MCPWM_CHANNEL_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_u32 ulChannel, BT_MCPWM_CHANNEL_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 68,
      "lineto": 68,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_MCPWM_CHANNEL_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmGetChannelPulsewidth": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_u32 ulChannel, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 70,
      "lineto": 70,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmSetChannelPulsewidth": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulValue",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_u32 ulChannel, BT_u32 ulValue",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 71,
      "lineto": 71,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_MCPwmSetDCModePattern": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMCPwm",
          "comment": ""
        },
        {
          "type": "BT_MCPWM_DCMODE_PATTERN",
          "name": "ulChannel0",
          "comment": ""
        },
        {
          "type": "BT_MCPWM_DCMODE_PATTERN",
          "name": "ulChannel1",
          "comment": ""
        },
        {
          "type": "BT_MCPWM_DCMODE_PATTERN",
          "name": "ulChannel2",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMCPwm, BT_MCPWM_DCMODE_PATTERN ulChannel0, BT_MCPWM_DCMODE_PATTERN ulChannel1, BT_MCPWM_DCMODE_PATTERN ulChannel2",
      "file": "interfaces/bt_dev_if_mcpwm.h",
      "line": 73,
      "lineto": 73,
      "comments": "",
      "sig": "BT_HANDLE::BT_MCPWM_DCMODE_PATTERN::BT_MCPWM_DCMODE_PATTERN::BT_MCPWM_DCMODE_PATTERN",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_mcpwm.h"
    },
    "BT_SetPowerState": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        },
        {
          "type": "BT_POWER_STATE",
          "name": "eState",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice, BT_POWER_STATE eState",
      "file": "interfaces/bt_if_power.h",
      "line": 21,
      "lineto": 21,
      "comments": "",
      "sig": "BT_HANDLE::BT_POWER_STATE",
      "rawComments": "",
      "group": "interfaces_bt_if_power.h"
    },
    "BT_GetPowerState": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        },
        {
          "type": "BT_POWER_STATE *",
          "name": "peState",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice, BT_POWER_STATE *peState",
      "file": "interfaces/bt_if_power.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "BT_HANDLE::BT_POWER_STATE *",
      "rawComments": "",
      "group": "interfaces_bt_if_power.h"
    },
    "BT_GetCoreID": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 4,
      "lineto": 4,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_GetTotalCores": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 5,
      "lineto": 5,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_BootCore": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulCoreID",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "address",
          "comment": ""
        },
        {
          "type": "bt_register_t",
          "name": "a",
          "comment": ""
        },
        {
          "type": "bt_register_t",
          "name": "b",
          "comment": ""
        },
        {
          "type": "bt_register_t",
          "name": "c",
          "comment": ""
        },
        {
          "type": "bt_register_t",
          "name": "d",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulCoreID, void *address, bt_register_t a, bt_register_t b, bt_register_t c, bt_register_t d",
      "file": "interfaces/bt_if_cpu.h",
      "line": 7,
      "lineto": 7,
      "comments": "",
      "sig": "BT_u32::void *::bt_register_t::bt_register_t::bt_register_t::bt_register_t",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheEnable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 9,
      "lineto": 9,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheDisable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 10,
      "lineto": 10,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheFlush": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 11,
      "lineto": 11,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheFlushLine": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "addr",
          "comment": ""
        }
      ],
      "argline": "void *addr",
      "file": "interfaces/bt_if_cpu.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheFlushRange": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "addr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        }
      ],
      "argline": "void *addr, BT_u32 len",
      "file": "interfaces/bt_if_cpu.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "void *::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheInvalidate": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 15,
      "lineto": 15,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheInvalidateLine": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "addr",
          "comment": ""
        }
      ],
      "argline": "void *addr",
      "file": "interfaces/bt_if_cpu.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_DCacheInvalidateRange": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "addr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        }
      ],
      "argline": "void *addr, BT_u32 len",
      "file": "interfaces/bt_if_cpu.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "void *::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_ICacheEnable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 19,
      "lineto": 19,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_ICacheDisable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 20,
      "lineto": 20,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_ICacheInvalidate": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interfaces/bt_if_cpu.h",
      "line": 21,
      "lineto": 21,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_if_cpu.h"
    },
    "BT_I2C_FUNC_SMBUS_WRITE_BYTE_DATA) BT_I2C_FUNC_SMBUS_WRITE_WORD_DATA) BT_I2C_FUNC_SMBUS_WRITE_BLOCK_DATA) BT_I2C_FUNC_SMBUS_WRITE_I2C_BLOCK) BT_I2C_FUNC_SMBUS_BYTE | \\ BT_I2C_FUNC_SMBUS_BYTE_DATA | \\ BT_I2C_FUNC_SMBUS_WORD_DATA | \\ BT_I2C_FUNC_SMBUS_PROC_CALL | \\ BT_I2C_FUNC_SMBUS_WRITE_BLOCK_DATA | \\ BT_I2C_FUNC_SMBUS_I2C_BLOCK | \\ BT_I2C_FUNC_SMBUS_PEC) BT_u32": {
      "description": "",
      "return": {
        "type": "BT_I2C_FUNC_SMBUS_WRITE_BYTE)",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnMasterTransfer",
          "comment": ""
        }
      ],
      "argline": "*pfnMasterTransfer",
      "file": "interfaces/bt_dev_if_i2c.h",
      "line": 43,
      "lineto": 62,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_i2c.h"
    },
    "BT_I2C_Transfer": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_I2C_BUS *",
          "name": "pBus",
          "comment": ""
        },
        {
          "type": "BT_I2C_MESSAGE *",
          "name": "pMessages",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulMessages",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "const BT_I2C_BUS *pBus, BT_I2C_MESSAGE *pMessages, BT_u32 ulMessages, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_i2c.h",
      "line": 66,
      "lineto": 69,
      "comments": "Define the unified API for I2C devices in BitThunder",
      "sig": "const BT_I2C_BUS *::BT_I2C_MESSAGE *::BT_u32::BT_ERROR *",
      "rawComments": "Define the unified API for I2C devices in BitThunder",
      "group": "interfaces_bt_dev_if_i2c.h"
    },
    "BT_I2C_MasterSend": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_I2C_CLIENT *",
          "name": "pClient",
          "comment": ""
        },
        {
          "type": "const BT_u8 *",
          "name": "pucSource",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulLength",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_I2C_CLIENT *pClient, const BT_u8 *pucSource, BT_u32 ulLength, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_i2c.h",
      "line": 70,
      "lineto": 70,
      "comments": "",
      "sig": "BT_I2C_CLIENT *::const BT_u8 *::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_i2c.h"
    },
    "BT_I2C_MasterReceive": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_I2C_CLIENT *",
          "name": "pClient",
          "comment": ""
        },
        {
          "type": "BT_u8 *",
          "name": "pucDest",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulLength",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_I2C_CLIENT *pClient, BT_u8 *pucDest, BT_u32 ulLength, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_i2c.h",
      "line": 71,
      "lineto": 71,
      "comments": "",
      "sig": "BT_I2C_CLIENT *::BT_u8 *::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_i2c.h"
    },
    "BT_CanSetBaudrate": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hCAN",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulBaudrate",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hCAN, BT_u32 ulBaudrate",
      "file": "interfaces/bt_dev_if_can.h",
      "line": 40,
      "lineto": 43,
      "comments": "Define the unified API for CAN devices in BlueThunder",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "Define the unified API for CAN devices in BlueThunder",
      "group": "interfaces_bt_dev_if_can.h"
    },
    "BT_CanSetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hCAN",
          "comment": ""
        },
        {
          "type": "BT_CAN_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hCAN, BT_CAN_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_can.h",
      "line": 44,
      "lineto": 44,
      "comments": "",
      "sig": "BT_HANDLE::BT_CAN_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_can.h"
    },
    "BT_CanGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hCAN",
          "comment": ""
        },
        {
          "type": "BT_CAN_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hCAN, BT_CAN_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_can.h",
      "line": 45,
      "lineto": 45,
      "comments": "",
      "sig": "BT_HANDLE::BT_CAN_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_can.h"
    },
    "BT_CanEnable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hCAN",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hCAN",
      "file": "interfaces/bt_dev_if_can.h",
      "line": 46,
      "lineto": 46,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_can.h"
    },
    "BT_CanDisable": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hCAN",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hCAN",
      "file": "interfaces/bt_dev_if_can.h",
      "line": 47,
      "lineto": 47,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_can.h"
    },
    "BT_CanSendMessage": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hCAN",
          "comment": ""
        },
        {
          "type": "BT_CAN_MESSAGE *",
          "name": "pCanMessage",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hCAN, BT_CAN_MESSAGE *pCanMessage",
      "file": "interfaces/bt_dev_if_can.h",
      "line": 48,
      "lineto": 48,
      "comments": "",
      "sig": "BT_HANDLE::BT_CAN_MESSAGE *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_can.h"
    },
    "BT_CanReadMessage": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hCAN",
          "comment": ""
        },
        {
          "type": "BT_CAN_MESSAGE *",
          "name": "pCanMessage",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hCAN, BT_CAN_MESSAGE *pCanMessage",
      "file": "interfaces/bt_dev_if_can.h",
      "line": 49,
      "lineto": 49,
      "comments": "",
      "sig": "BT_HANDLE::BT_CAN_MESSAGE *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_can.h"
    },
    "BT_CharDeviceRead": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        },
        {
          "type": "BT_u8 *",
          "name": "pucDest",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice, BT_u32 ulFlags, BT_u32 ulSize, BT_u8 *pucDest",
      "file": "interfaces/bt_if_chardev.h",
      "line": 18,
      "lineto": 18,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::BT_u8 *",
      "rawComments": "",
      "group": "interfaces_bt_if_chardev.h"
    },
    "BT_CharDeviceWrite": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        },
        {
          "type": "const BT_u8 *",
          "name": "pucSource",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice, BT_u32 ulFlags, BT_u32 ulSize, const BT_u8 *pucSource",
      "file": "interfaces/bt_if_chardev.h",
      "line": 19,
      "lineto": 19,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::const BT_u8 *",
      "rawComments": "",
      "group": "interfaces_bt_if_chardev.h"
    },
    "BT_CharDeviceFlush": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice",
      "file": "interfaces/bt_if_chardev.h",
      "line": 20,
      "lineto": 20,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_if_chardev.h"
    },
    "struct _BT_DEV_IF_TIMER { BT_u32": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnGetInputClock",
          "comment": ""
        }
      ],
      "argline": "*pfnGetInputClock",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 10,
      "lineto": 11,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerStart": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerStop": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 33,
      "lineto": 33,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerSetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, void *pConfig",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "BT_HANDLE::void *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, void *pConfig",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "BT_HANDLE::void *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerEnableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 38,
      "lineto": 38,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerDisableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 39,
      "lineto": 39,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerRegisterCallback": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_TIMER_CALLBACK",
          "name": "pfnCallback",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pParam",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_TIMER_CALLBACK pfnCallback, void *pParam, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "BT_HANDLE::BT_TIMER_CALLBACK::void *::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerUnregisterCallback": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "hCallback",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_HANDLE hCallback",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 41,
      "lineto": 41,
      "comments": "",
      "sig": "BT_HANDLE::BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerGetPrescaler": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 43,
      "lineto": 43,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerSetPrescaler": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulPrescaler",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_u32 ulPrescaler",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 44,
      "lineto": 44,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerGetPeriodCount": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 45,
      "lineto": 45,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerSetPeriodCount": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulPeriodCount",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_u32 ulPeriodCount",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 46,
      "lineto": 46,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerSetFrequency": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFrequencyHz",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_u32 ulFrequencyHz",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 47,
      "lineto": 47,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerGetFrequency": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 48,
      "lineto": 48,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerEnableReload": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 50,
      "lineto": 50,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerDisableReload": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 51,
      "lineto": 51,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerGetValue": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 53,
      "lineto": 53,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerSetValue": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulValue",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_u32 ulValue",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 54,
      "lineto": 54,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "BT_TimerExpired": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hTimer",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hTimer, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_timer.h",
      "line": 55,
      "lineto": 55,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_timer.h"
    },
    "struct _BT_DEV_IF_SYSTIMER { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnGetClockRate",
          "comment": ""
        }
      ],
      "argline": "*pfnGetClockRate",
      "file": "interfaces/bt_dev_if_systimer.h",
      "line": 7,
      "lineto": 8,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_systimer.h"
    },
    "struct _BT_DEV_IF_SDIO { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSendCommand",
          "comment": ""
        }
      ],
      "argline": "*pfnSendCommand",
      "file": "interfaces/bt_dev_if_sdio.h",
      "line": 5,
      "lineto": 6,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_sdio.h"
    },
    "struct _BT_DEV_IF_IRQ { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnRegister",
          "comment": ""
        }
      ],
      "argline": "*pfnRegister",
      "file": "interfaces/bt_dev_if_irq.h",
      "line": 7,
      "lineto": 8,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_irq.h"
    },
    "BT_i8 ": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnGetLabel",
          "comment": ""
        }
      ],
      "argline": "*pfnGetLabel",
      "file": "interfaces/bt_dev_if_irq.h",
      "line": 10,
      "lineto": 10,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_irq.h"
    },
    "struct _BT_DEV_IF_DAC { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnSetConfig",
          "comment": ""
        }
      ],
      "argline": "*pfnSetConfig",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 23,
      "lineto": 24,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "BT_DacStart": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDAC",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDAC",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 33,
      "lineto": 33,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "BT_DacStop": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDAC",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDAC",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "BT_DacSetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDAC",
          "comment": ""
        },
        {
          "type": "BT_DAC_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDAC, BT_DAC_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "BT_HANDLE::BT_DAC_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "BT_DacGetConfiguration": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDAC",
          "comment": ""
        },
        {
          "type": "BT_DAC_CONFIG *",
          "name": "pConfig",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDAC, BT_DAC_CONFIG *pConfig",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 37,
      "lineto": 37,
      "comments": "",
      "sig": "BT_HANDLE::BT_DAC_CONFIG *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "BT_DacRegisterCallback": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDAC",
          "comment": ""
        },
        {
          "type": "BT_ADC_CALLBACK",
          "name": "pfnCallback",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pParam",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDAC, BT_ADC_CALLBACK pfnCallback, void *pParam, BT_ERROR *pError",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 39,
      "lineto": 39,
      "comments": "",
      "sig": "BT_HANDLE::BT_ADC_CALLBACK::void *::BT_ERROR *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "BT_DacUnregisterCallback": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDAC",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "hCallback",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDAC, BT_HANDLE hCallback",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "BT_HANDLE::BT_HANDLE",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "BT_DacWrite": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDAC",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulChannel",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        },
        {
          "type": "BT_u32 *",
          "name": "pSrc",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDAC, BT_u32 ulChannel, BT_u32 ulSize, BT_u32 *pSrc",
      "file": "interfaces/bt_dev_if_dac.h",
      "line": 42,
      "lineto": 42,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::BT_u32 *",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_dac.h"
    },
    "struct _BT_DEV_IF_GTIMER { BT_u32": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnGetClockRate",
          "comment": ""
        }
      ],
      "argline": "*pfnGetClockRate",
      "file": "interfaces/bt_dev_if_gtimer.h",
      "line": 6,
      "lineto": 7,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_gtimer.h"
    },
    "ulCapabilities;\t\t\t BT_ERROR": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnEventSubscribe",
          "comment": ""
        }
      ],
      "argline": "*pfnEventSubscribe",
      "file": "interfaces/bt_dev_if_emac.h",
      "line": 20,
      "lineto": 26,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_emac.h"
    },
    "struct _BT_DEV_IF_MII { BT_u16": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnRead",
          "comment": ""
        }
      ],
      "argline": "*pfnRead",
      "file": "interfaces/bt_dev_if_emac.h",
      "line": 46,
      "lineto": 47,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_emac.h"
    },
    "struct BT_DEV_IF_PHY { BT_ERROR": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*pfnConfigInit",
          "comment": ""
        }
      ],
      "argline": "*pfnConfigInit",
      "file": "interfaces/bt_dev_if_emac.h",
      "line": 52,
      "lineto": 53,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interfaces_bt_dev_if_emac.h"
    },
    "BT_TaskletSchedule": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_TASKLET *",
          "name": "pTasklet",
          "comment": ""
        }
      ],
      "argline": "BT_TASKLET *pTasklet",
      "file": "interrupts/bt_tasklets.h",
      "line": 27,
      "lineto": 31,
      "comments": "",
      "sig": "BT_TASKLET *",
      "rawComments": "",
      "group": "interrupts_bt_tasklets.h"
    },
    "BT_TaskletHighSchedule": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_TASKLET *",
          "name": "pTasklet",
          "comment": ""
        }
      ],
      "argline": "BT_TASKLET *pTasklet",
      "file": "interrupts/bt_tasklets.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "BT_TASKLET *",
      "rawComments": "",
      "group": "interrupts_bt_tasklets.h"
    },
    "BT_RegisterInterruptController": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulBaseIRQ",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulTotalIRQs",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "hIRQ",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulBaseIRQ, BT_u32 ulTotalIRQs, BT_HANDLE hIRQ",
      "file": "interrupts/bt_interrupts.h",
      "line": 24,
      "lineto": 24,
      "comments": "",
      "sig": "BT_u32::BT_u32::BT_HANDLE",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_RegisterInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        },
        {
          "type": "BT_FN_INTERRUPT_HANDLER",
          "name": "pfnHandler",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pParam",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ, BT_FN_INTERRUPT_HANDLER pfnHandler, void *pParam",
      "file": "interrupts/bt_interrupts.h",
      "line": 25,
      "lineto": 25,
      "comments": "",
      "sig": "BT_u32::BT_FN_INTERRUPT_HANDLER::void *",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_SetInterruptLabel": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        },
        {
          "type": "BT_FN_INTERRUPT_HANDLER",
          "name": "pfnHandler",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pParam",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "label",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ, BT_FN_INTERRUPT_HANDLER pfnHandler, void *pParam, const BT_i8 *label",
      "file": "interrupts/bt_interrupts.h",
      "line": 26,
      "lineto": 26,
      "comments": "",
      "sig": "BT_u32::BT_FN_INTERRUPT_HANDLER::void *::const BT_i8 *",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_i8 BT_GetInterruptLabel": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ",
      "file": "interrupts/bt_interrupts.h",
      "line": 27,
      "lineto": 27,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_InterruptRegistered": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ",
      "file": "interrupts/bt_interrupts.h",
      "line": 28,
      "lineto": 28,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_UnregisterInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        },
        {
          "type": "BT_FN_INTERRUPT_HANDLER",
          "name": "pfnHandler",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pParam",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ, BT_FN_INTERRUPT_HANDLER pfnHandler, void *pParam",
      "file": "interrupts/bt_interrupts.h",
      "line": 29,
      "lineto": 29,
      "comments": "",
      "sig": "BT_u32::BT_FN_INTERRUPT_HANDLER::void *",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_SetInterruptPriority": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulPriority",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ, BT_u32 ulPriority",
      "file": "interrupts/bt_interrupts.h",
      "line": 30,
      "lineto": 30,
      "comments": "",
      "sig": "BT_u32::BT_u32",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_GetInterruptPriority": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ, BT_ERROR *pError",
      "file": "interrupts/bt_interrupts.h",
      "line": 31,
      "lineto": 31,
      "comments": "",
      "sig": "BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_EnableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ",
      "file": "interrupts/bt_interrupts.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_DisableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulIRQ",
      "file": "interrupts/bt_interrupts.h",
      "line": 33,
      "lineto": 33,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_GetInterruptCount": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interrupts/bt_interrupts.h",
      "line": 37,
      "lineto": 37,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_EnableInterrupts": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interrupts/bt_interrupts.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_DisableInterrupts": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "interrupts/bt_interrupts.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_SetInterruptAffinity": {
      "description": "Controls CPU Interrupt Affinity.",
      "return": {
        "type": "BT_ERROR",
        "comment": "BT_ERR_NONE on success."
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulIRQ",
          "comment": "Interrupt Number"
        },
        {
          "type": "BT_u32",
          "name": "ulCPU",
          "comment": "CPU Id to set the affinity for. (in range(0..nCPUs))."
        },
        {
          "type": "BT_BOOL",
          "name": "bReceive",
          "comment": "BT_TRUE if this CPU should receive the interrupt, BT_FALSE if not."
        }
      ],
      "argline": "BT_u32 ulIRQ, BT_u32 ulCPU, BT_BOOL bReceive",
      "file": "interrupts/bt_interrupts.h",
      "line": 39,
      "lineto": 48,
      "comments": "",
      "sig": "BT_u32::BT_u32::BT_BOOL",
      "rawComments": "Controls CPU Interrupt Affinity.",
      "group": "interrupts_bt_interrupts.h"
    },
    "BT_OpenSoftIRQ": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulSoftIRQ",
          "comment": ""
        },
        {
          "type": "BT_SOFTIRQ_HANDLER",
          "name": "pfnHandler",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pData",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulSoftIRQ, BT_SOFTIRQ_HANDLER pfnHandler, void *pData",
      "file": "interrupts/bt_softirq.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "BT_u32::BT_SOFTIRQ_HANDLER::void *",
      "rawComments": "",
      "group": "interrupts_bt_softirq.h"
    },
    "BT_RaiseSoftIRQ": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulSoftIRQ",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulSoftIRQ",
      "file": "interrupts/bt_softirq.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "interrupts_bt_softirq.h"
    },
    "BT_RaiseSoftIRQFromISR": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulSoftIRQ",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulSoftIRQ",
      "file": "interrupts/bt_softirq.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "interrupts_bt_softirq.h"
    },
    "mask = BT_BIT_MASK": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "nr",
          "comment": ""
        }
      ],
      "argline": "nr",
      "file": "helpers/bt_bitops.h",
      "line": 134,
      "lineto": 137,
      "comments": "}\nstatic inline int bt_test_and_change_bit(BT_u32 nr, volatile BT_u32 *addr) {",
      "sig": "",
      "rawComments": "}\nstatic inline int bt_test_and_change_bit(BT_u32 nr, volatile BT_u32 *addr) {",
      "group": "helpers_bt_bitops.h"
    },
    "p =": {
      "description": "",
      "return": {
        "type": "BT_u32*",
        "comment": null
      },
      "args": [
        {
          "type": "(BT_u32 *",
          "name": "",
          "comment": ""
        }
      ],
      "argline": "(BT_u32 *",
      "file": "helpers/bt_bitops.h",
      "line": 138,
      "lineto": 138,
      "comments": "",
      "sig": "(BT_u32 *",
      "rawComments": "",
      "group": "helpers_bt_bitops.h"
    },
    "1UL &": {
      "description": "",
      "return": {
        "type": "return",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "addr[BT_BIT_WORD(nr",
          "comment": ""
        }
      ],
      "argline": "addr[BT_BIT_WORD(nr",
      "file": "helpers/bt_bitops.h",
      "line": 70,
      "lineto": 73,
      "comments": "}\nstatic inline int bt_test_bit(BT_u32 nr, const volatile BT_u32 *addr) {",
      "sig": "",
      "rawComments": "}\nstatic inline int bt_test_bit(BT_u32 nr, const volatile BT_u32 *addr) {",
      "group": "helpers_bt_bitops.h"
    },
    "BT_CalculateClockDivider": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "clkin",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "clkout",
          "comment": ""
        },
        {
          "type": "BT_DIVIDER_PARAMS *",
          "name": "pDiv",
          "comment": ""
        }
      ],
      "argline": "BT_u32 clkin, BT_u32 clkout, BT_DIVIDER_PARAMS *pDiv",
      "file": "helpers/bt_clkdiv.h",
      "line": 19,
      "lineto": 19,
      "comments": "",
      "sig": "BT_u32::BT_u32::BT_DIVIDER_PARAMS *",
      "rawComments": "",
      "group": "helpers_bt_clkdiv.h"
    },
    "BT_ReadDir": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDir",
          "comment": ""
        },
        {
          "type": "BT_DIRENT *",
          "name": "pDirent",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDir, BT_DIRENT *pDirent",
      "file": "fs/bt_dir.h",
      "line": 19,
      "lineto": 19,
      "comments": "",
      "sig": "BT_HANDLE::BT_DIRENT *",
      "rawComments": "",
      "group": "fs_bt_dir.h"
    },
    "BT_ReadInode": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hInode",
          "comment": ""
        },
        {
          "type": "BT_INODE *",
          "name": "pInode",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hInode, BT_INODE *pInode",
      "file": "fs/bt_inode.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "BT_HANDLE::BT_INODE *",
      "rawComments": "",
      "group": "fs_bt_inode.h"
    },
    "BT_Read": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_u32 ulFlags, BT_u32 ulSize, void *pBuffer",
      "file": "fs/bt_file.h",
      "line": 10,
      "lineto": 10,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::void *",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_Write": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "pBuffer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_u32 ulFlags, BT_u32 ulSize, const void *pBuffer",
      "file": "fs/bt_file.h",
      "line": 11,
      "lineto": 11,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::const void *",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_GetC": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_u32 ulFlags",
      "file": "fs/bt_file.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_PutC": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        },
        {
          "type": "BT_i8",
          "name": "cData",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_u32 ulFlags, BT_i8 cData",
      "file": "fs/bt_file.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_i8",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_Seek": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_s64",
          "name": "ulOffset",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "whence",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_s64 ulOffset, BT_u32 whence",
      "file": "fs/bt_file.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "BT_HANDLE::BT_s64::BT_u32",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_Tell": {
      "description": "",
      "return": {
        "type": "BT_u64",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_ERROR *pError",
      "file": "fs/bt_file.h",
      "line": 15,
      "lineto": 15,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_GetS": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulSize",
          "comment": ""
        },
        {
          "type": "BT_i8 *",
          "name": "s",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_u32 ulSize, BT_i8 *s",
      "file": "fs/bt_file.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_Flush": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile",
      "file": "fs/bt_file.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_EOF": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFile",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFile, BT_ERROR *pError",
      "file": "fs/bt_file.h",
      "line": 18,
      "lineto": 18,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "fs_bt_file.h"
    },
    "BT_DeviceOpen": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "const char *",
          "name": "szpDevicePath",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "const char *szpDevicePath, BT_ERROR *pError",
      "file": "fs/bt_devfs.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "const char *::BT_ERROR *",
      "rawComments": "",
      "group": "fs_bt_devfs.h"
    },
    "BT_DeviceRegister": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_devfs_node *",
          "name": "node",
          "comment": ""
        },
        {
          "type": "const char *",
          "name": "szpName",
          "comment": ""
        }
      ],
      "argline": "struct bt_devfs_node *node, const char *szpName",
      "file": "fs/bt_devfs.h",
      "line": 42,
      "lineto": 42,
      "comments": "",
      "sig": "struct bt_devfs_node *::const char *",
      "rawComments": "",
      "group": "fs_bt_devfs.h"
    },
    "BT_GetInodeName": {
      "description": "",
      "return": {
        "type": "BT_i8*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE h, BT_ERROR *pError",
      "file": "fs/bt_devfs.h",
      "line": 43,
      "lineto": 43,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "fs_bt_devfs.h"
    },
    "BT_RegisterFilesystem": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hFS",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hFS",
      "file": "fs/bt_fs.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_GetModeFlags": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "mode",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *mode",
      "file": "fs/bt_fs.h",
      "line": 24,
      "lineto": 24,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_Open": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "mode",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath, BT_u32 mode, BT_ERROR *pError",
      "file": "fs/bt_fs.h",
      "line": 25,
      "lineto": 25,
      "comments": "",
      "sig": "const BT_i8 *::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_Mount": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "src",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "target",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "filesystem",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "mountflags",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "data",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *src, const BT_i8 *target, const BT_i8 *filesystem, BT_u32 mountflags, const void *data",
      "file": "fs/bt_fs.h",
      "line": 26,
      "lineto": 26,
      "comments": "",
      "sig": "const BT_i8 *::const BT_i8 *::const BT_i8 *::BT_u32::const void *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_MkDir": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath",
      "file": "fs/bt_fs.h",
      "line": 27,
      "lineto": 27,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_RmDir": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath",
      "file": "fs/bt_fs.h",
      "line": 28,
      "lineto": 28,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_OpenDir": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath, BT_ERROR *pError",
      "file": "fs/bt_fs.h",
      "line": 29,
      "lineto": 29,
      "comments": "",
      "sig": "const BT_i8 *::BT_ERROR *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_GetInode": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath, BT_ERROR *pError",
      "file": "fs/bt_fs.h",
      "line": 30,
      "lineto": 30,
      "comments": "",
      "sig": "const BT_i8 *::BT_ERROR *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_Remove": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath",
      "file": "fs/bt_fs.h",
      "line": 31,
      "lineto": 31,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_Unlink": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath",
      "file": "fs/bt_fs.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_Rename": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPathA",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "szpPathB",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPathA, const BT_i8 *szpPathB",
      "file": "fs/bt_fs.h",
      "line": 33,
      "lineto": 33,
      "comments": "",
      "sig": "const BT_i8 *::const BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_GetCwd": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_i8 *",
          "name": "buf",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        }
      ],
      "argline": "BT_i8 *buf, BT_u32 len",
      "file": "fs/bt_fs.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "BT_i8 *::BT_u32",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "BT_ChDir": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "path",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *path",
      "file": "fs/bt_fs.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "fs_bt_fs.h"
    },
    "bt_lwip_netif_init": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF",
      "file": "net/bt_lwip.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "BT_NETIF_PRIV *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "bt_lwip_process": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF",
      "file": "net/bt_lwip.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "BT_NETIF_PRIV *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "bt_lwip_netif_up": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF",
      "file": "net/bt_lwip.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "BT_NETIF_PRIV *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "bt_lwip_netif_down": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF",
      "file": "net/bt_lwip.h",
      "line": 18,
      "lineto": 18,
      "comments": "",
      "sig": "BT_NETIF_PRIV *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "bt_lwip_netif_set_addr": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "ip",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "netmask",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "gw",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF, BT_IPADDRESS *ip, BT_IPADDRESS *netmask, BT_IPADDRESS *gw",
      "file": "net/bt_lwip.h",
      "line": 19,
      "lineto": 19,
      "comments": "",
      "sig": "BT_NETIF_PRIV *::BT_IPADDRESS *::BT_IPADDRESS *::BT_IPADDRESS *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "bt_lwip_netif_get_addr": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "ip",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "netmask",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "gw",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF, BT_IPADDRESS *ip, BT_IPADDRESS *netmask, BT_IPADDRESS *gw",
      "file": "net/bt_lwip.h",
      "line": 20,
      "lineto": 20,
      "comments": "",
      "sig": "BT_NETIF_PRIV *::BT_IPADDRESS *::BT_IPADDRESS *::BT_IPADDRESS *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "bt_lwip_netif_dhcp_done": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF",
      "file": "net/bt_lwip.h",
      "line": 21,
      "lineto": 21,
      "comments": "",
      "sig": "BT_NETIF_PRIV *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "bt_lwip_netif_get_hostname": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NETIF_PRIV *",
          "name": "pIF",
          "comment": ""
        },
        {
          "type": "char *",
          "name": "hostname",
          "comment": ""
        }
      ],
      "argline": "BT_NETIF_PRIV *pIF, char *hostname",
      "file": "net/bt_lwip.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "BT_NETIF_PRIV *::char *",
      "rawComments": "",
      "group": "net_bt_lwip.h"
    },
    "BT_RegisterNetworkInterface": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hIF",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hIF",
      "file": "net/bt_net.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_isNetworkingReady": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "net/bt_net.h",
      "line": 41,
      "lineto": 41,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_GetTotalNetworkInterfaces": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "net/bt_net.h",
      "line": 43,
      "lineto": 43,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_GetNetif": {
      "description": "",
      "return": {
        "type": "BT_NET_IF*",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *name, BT_ERROR *pError",
      "file": "net/bt_net.h",
      "line": 44,
      "lineto": 44,
      "comments": "",
      "sig": "const BT_i8 *::BT_ERROR *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_GetNetifFromHandle": {
      "description": "",
      "return": {
        "type": "BT_NET_IF*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMac",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMac, BT_ERROR *pError",
      "file": "net/bt_net.h",
      "line": 45,
      "lineto": 45,
      "comments": "",
      "sig": "BT_HANDLE::BT_ERROR *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_GetNetifByIndex": {
      "description": "",
      "return": {
        "type": "BT_NET_IF*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "index",
          "comment": ""
        }
      ],
      "argline": "BT_u32 index",
      "file": "net/bt_net.h",
      "line": 46,
      "lineto": 46,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_NetifGetMacAddress": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        },
        {
          "type": "BT_u8 *",
          "name": "hwaddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulLength",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface, BT_u8 *hwaddr, BT_u32 ulLength",
      "file": "net/bt_net.h",
      "line": 48,
      "lineto": 48,
      "comments": "",
      "sig": "BT_NET_IF *::BT_u8 *::BT_u32",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_NetifSetMacAddress": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        },
        {
          "type": "BT_u8 *",
          "name": "hwaddr",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulLength",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface, BT_u8 *hwaddr, BT_u32 ulLength",
      "file": "net/bt_net.h",
      "line": 49,
      "lineto": 49,
      "comments": "",
      "sig": "BT_NET_IF *::BT_u8 *::BT_u32",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_NetifSetAddress": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "ip",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "netmask",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "gw",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface, BT_IPADDRESS *ip, BT_IPADDRESS *netmask, BT_IPADDRESS *gw",
      "file": "net/bt_net.h",
      "line": 51,
      "lineto": 51,
      "comments": "",
      "sig": "BT_NET_IF *::BT_IPADDRESS *::BT_IPADDRESS *::BT_IPADDRESS *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_NetifGetAddress": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "ip",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "netmask",
          "comment": ""
        },
        {
          "type": "BT_IPADDRESS *",
          "name": "gw",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface, BT_IPADDRESS *ip, BT_IPADDRESS *netmask, BT_IPADDRESS *gw",
      "file": "net/bt_net.h",
      "line": 52,
      "lineto": 52,
      "comments": "",
      "sig": "BT_NET_IF *::BT_IPADDRESS *::BT_IPADDRESS *::BT_IPADDRESS *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_NetifConfigureLink": {
      "description": "Allows configuration of PHY/Link modes.",
      "return": {
        "type": "BT_ERROR",
        "comment": "BT_ERR_NONE\t\tOn sucessful application of the configuration."
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        },
        {
          "type": "struct bt_phy_config *",
          "name": "config",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface, struct bt_phy_config *config",
      "file": "net/bt_net.h",
      "line": 54,
      "lineto": 63,
      "comments": "@public\n@param \t[IN] interface\tNetwork interface to be configured.\n@param\t[IN] config\t\tStructure containing the configuration flags to be applied.",
      "sig": "BT_NET_IF *::struct bt_phy_config *",
      "rawComments": "Allows configuration of PHY/Link modes.\n\n@public\n@param \t[IN] interface\tNetwork interface to be configured.\n@param\t[IN] config\t\tStructure containing the configuration flags to be applied.",
      "group": "net_bt_net.h"
    },
    "BT_NetifRestartLink": {
      "description": "Resets the PHY/Link after a reconfiguration.",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface",
      "file": "net/bt_net.h",
      "line": 65,
      "lineto": 69,
      "comments": "",
      "sig": "BT_NET_IF *",
      "rawComments": "Resets the PHY/Link after a reconfiguration.",
      "group": "net_bt_net.h"
    },
    "BT_NetifGetLinkState": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        },
        {
          "type": "struct bt_phy_linkstate *",
          "name": "linkstate",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface, struct bt_phy_linkstate *linkstate",
      "file": "net/bt_net.h",
      "line": 71,
      "lineto": 71,
      "comments": "",
      "sig": "BT_NET_IF *::struct bt_phy_linkstate *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_StartNetif": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface",
      "file": "net/bt_net.h",
      "line": 73,
      "lineto": 73,
      "comments": "",
      "sig": "BT_NET_IF *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_StopNetif": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface",
      "file": "net/bt_net.h",
      "line": 74,
      "lineto": 74,
      "comments": "",
      "sig": "BT_NET_IF *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_NetifGetHostname": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "interface",
          "comment": ""
        },
        {
          "type": "char *",
          "name": "hostname",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *interface, char *hostname",
      "file": "net/bt_net.h",
      "line": 76,
      "lineto": 76,
      "comments": "",
      "sig": "BT_NET_IF *::char *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "bt_netif_adjust_link": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_NET_IF *",
          "name": "netif",
          "comment": ""
        }
      ],
      "argline": "BT_NET_IF *netif",
      "file": "net/bt_net.h",
      "line": 78,
      "lineto": 78,
      "comments": "",
      "sig": "BT_NET_IF *",
      "rawComments": "",
      "group": "net_bt_net.h"
    },
    "BT_RegisterMiiBus": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMII",
          "comment": ""
        },
        {
          "type": "struct bt_mii_bus *",
          "name": "bus",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMII, struct bt_mii_bus *bus",
      "file": "net/bt_phy.h",
      "line": 112,
      "lineto": 112,
      "comments": "",
      "sig": "BT_HANDLE::struct bt_mii_bus *",
      "rawComments": "",
      "group": "net_bt_phy.h"
    },
    "BT_ConnectPHY": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMac",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulAddress",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMac, BT_u32 ulAddress",
      "file": "net/bt_phy.h",
      "line": 113,
      "lineto": 113,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32",
      "rawComments": "",
      "group": "net_bt_phy.h"
    },
    "bt_phy_read": {
      "description": "",
      "return": {
        "type": "BT_u16",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_phy_device *",
          "name": "phy",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "regnum",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "struct bt_phy_device *phy, BT_u32 regnum, BT_ERROR *pError",
      "file": "net/bt_phy.h",
      "line": 115,
      "lineto": 118,
      "comments": "Kernel Internal PHY access API.",
      "sig": "struct bt_phy_device *::BT_u32::BT_ERROR *",
      "rawComments": "Kernel Internal PHY access API.",
      "group": "net_bt_phy.h"
    },
    "bt_phy_write": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_phy_device *",
          "name": "phy",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "regnum",
          "comment": ""
        },
        {
          "type": "BT_u16",
          "name": "val",
          "comment": ""
        }
      ],
      "argline": "struct bt_phy_device *phy, BT_u32 regnum, BT_u16 val",
      "file": "net/bt_phy.h",
      "line": 119,
      "lineto": 119,
      "comments": "",
      "sig": "struct bt_phy_device *::BT_u32::BT_u16",
      "rawComments": "",
      "group": "net_bt_phy.h"
    },
    "bt_phy_generic_init": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_phy_device *",
          "name": "phy",
          "comment": ""
        }
      ],
      "argline": "struct bt_phy_device *phy",
      "file": "net/bt_phy.h",
      "line": 122,
      "lineto": 125,
      "comments": "Generic PHY implementation methods:",
      "sig": "struct bt_phy_device *",
      "rawComments": "Generic PHY implementation methods:",
      "group": "net_bt_phy.h"
    },
    "bt_phy_generic_read_status": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_phy_device *",
          "name": "phy",
          "comment": ""
        }
      ],
      "argline": "struct bt_phy_device *phy",
      "file": "net/bt_phy.h",
      "line": 126,
      "lineto": 126,
      "comments": "",
      "sig": "struct bt_phy_device *",
      "rawComments": "",
      "group": "net_bt_phy.h"
    },
    "accept": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "struct sockaddr *",
          "name": "addr",
          "comment": ""
        },
        {
          "type": "socklen_t *",
          "name": "addrlen",
          "comment": ""
        }
      ],
      "argline": "int s, struct sockaddr *addr, socklen_t *addrlen",
      "file": "net/bt_sockets.h",
      "line": 6,
      "lineto": 6,
      "comments": "",
      "sig": "int::struct sockaddr *::socklen_t *",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "bind": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "const struct sockaddr *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "socklen_t",
          "name": "namelen",
          "comment": ""
        }
      ],
      "argline": "int s, const struct sockaddr *name, socklen_t namelen",
      "file": "net/bt_sockets.h",
      "line": 7,
      "lineto": 7,
      "comments": "",
      "sig": "int::const struct sockaddr *::socklen_t",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "shutdown": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "int",
          "name": "how",
          "comment": ""
        }
      ],
      "argline": "int s, int how",
      "file": "net/bt_sockets.h",
      "line": 8,
      "lineto": 8,
      "comments": "",
      "sig": "int::int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "getpeername": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "struct sockaddr *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "socklen_t *",
          "name": "namelen",
          "comment": ""
        }
      ],
      "argline": "int s, struct sockaddr *name, socklen_t *namelen",
      "file": "net/bt_sockets.h",
      "line": 9,
      "lineto": 9,
      "comments": "",
      "sig": "int::struct sockaddr *::socklen_t *",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "getsockname": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "struct sockaddr *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "socklen_t *",
          "name": "namelen",
          "comment": ""
        }
      ],
      "argline": "int s, struct sockaddr *name, socklen_t *namelen",
      "file": "net/bt_sockets.h",
      "line": 10,
      "lineto": 10,
      "comments": "",
      "sig": "int::struct sockaddr *::socklen_t *",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "getsockopt": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "int",
          "name": "level",
          "comment": ""
        },
        {
          "type": "int",
          "name": "optname",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "optval",
          "comment": ""
        },
        {
          "type": "socklen_t *",
          "name": "optlen",
          "comment": ""
        }
      ],
      "argline": "int s, int level, int optname, void *optval, socklen_t *optlen",
      "file": "net/bt_sockets.h",
      "line": 11,
      "lineto": 11,
      "comments": "",
      "sig": "int::int::int::void *::socklen_t *",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "setsockopt": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "int",
          "name": "level",
          "comment": ""
        },
        {
          "type": "int",
          "name": "optname",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "optval",
          "comment": ""
        },
        {
          "type": "socklen_t",
          "name": "optlen",
          "comment": ""
        }
      ],
      "argline": "int s, int level, int optname, const void *optval, socklen_t optlen",
      "file": "net/bt_sockets.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "int::int::int::const void *::socklen_t",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "close": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        }
      ],
      "argline": "int s",
      "file": "net/bt_sockets.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "connect": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "const struct sockaddr *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "socklen_t",
          "name": "namelen",
          "comment": ""
        }
      ],
      "argline": "int s, const struct sockaddr *name, socklen_t namelen",
      "file": "net/bt_sockets.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "int::const struct sockaddr *::socklen_t",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "listen": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "int",
          "name": "backlog",
          "comment": ""
        }
      ],
      "argline": "int s, int backlog",
      "file": "net/bt_sockets.h",
      "line": 15,
      "lineto": 15,
      "comments": "",
      "sig": "int::int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "recv": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "mem",
          "comment": ""
        },
        {
          "type": "size_t",
          "name": "len",
          "comment": ""
        },
        {
          "type": "int",
          "name": "flags",
          "comment": ""
        }
      ],
      "argline": "int s, void *mem, size_t len, int flags",
      "file": "net/bt_sockets.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "int::void *::size_t::int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "read": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "mem",
          "comment": ""
        },
        {
          "type": "size_t",
          "name": "len",
          "comment": ""
        }
      ],
      "argline": "int s, void *mem, size_t len",
      "file": "net/bt_sockets.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "int::void *::size_t",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "send": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "dataptr",
          "comment": ""
        },
        {
          "type": "size_t",
          "name": "size",
          "comment": ""
        },
        {
          "type": "int",
          "name": "flags",
          "comment": ""
        }
      ],
      "argline": "int s, const void *dataptr, size_t size, int flags",
      "file": "net/bt_sockets.h",
      "line": 20,
      "lineto": 20,
      "comments": "",
      "sig": "int::const void *::size_t::int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "socket": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "domain",
          "comment": ""
        },
        {
          "type": "int",
          "name": "type",
          "comment": ""
        },
        {
          "type": "int",
          "name": "protocol",
          "comment": ""
        }
      ],
      "argline": "int domain, int type, int protocol",
      "file": "net/bt_sockets.h",
      "line": 23,
      "lineto": 23,
      "comments": "",
      "sig": "int::int::int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "closesocket": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        }
      ],
      "argline": "int s",
      "file": "net/bt_sockets.h",
      "line": 24,
      "lineto": 24,
      "comments": "",
      "sig": "int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "write": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "dataptr",
          "comment": ""
        },
        {
          "type": "size_t",
          "name": "size",
          "comment": ""
        }
      ],
      "argline": "int s, const void *dataptr, size_t size",
      "file": "net/bt_sockets.h",
      "line": 25,
      "lineto": 25,
      "comments": "",
      "sig": "int::const void *::size_t",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "ioctl": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "long",
          "name": "cmd",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "argp",
          "comment": ""
        }
      ],
      "argline": "int s, long cmd, void *argp",
      "file": "net/bt_sockets.h",
      "line": 26,
      "lineto": 28,
      "comments": "int select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,\nstruct timeval *timeout);*/",
      "sig": "int::long::void *",
      "rawComments": "int select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,\nstruct timeval *timeout);*/",
      "group": "net_bt_sockets.h"
    },
    "fcntl": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "s",
          "comment": ""
        },
        {
          "type": "int",
          "name": "cmd",
          "comment": ""
        },
        {
          "type": "int",
          "name": "val",
          "comment": ""
        }
      ],
      "argline": "int s, int cmd, int val",
      "file": "net/bt_sockets.h",
      "line": 29,
      "lineto": 29,
      "comments": "",
      "sig": "int::int::int",
      "rawComments": "",
      "group": "net_bt_sockets.h"
    },
    "bt_of_irq_count": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "dev",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *dev",
      "file": "of/bt_of_irq.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of_irq.h"
    },
    "bt_of_irq_to_resource_table": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        },
        {
          "type": "BT_RESOURCE *",
          "name": "r",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "nr_irqs",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device, BT_RESOURCE *r, BT_u32 nr_irqs",
      "file": "of/bt_of_irq.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "struct bt_device_node *::BT_RESOURCE *::BT_u32",
      "rawComments": "",
      "group": "of_bt_of_irq.h"
    },
    "void bt_of_get_fdt": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "of/bt_of.h",
      "line": 9,
      "lineto": 9,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_device_node bt_of_node_get": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "node",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *node",
      "file": "of/bt_of.h",
      "line": 11,
      "lineto": 11,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_node_put": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "node",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *node",
      "file": "of/bt_of.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_device_node bt_of_get_parent": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "const struct bt_device_node *",
          "name": "node",
          "comment": ""
        }
      ],
      "argline": "const struct bt_device_node *node",
      "file": "of/bt_of.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "const struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_device_property bt_of_find_property": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "const struct bt_device_node *",
          "name": "np",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "BT_u32 *",
          "name": "lenp",
          "comment": ""
        }
      ],
      "argline": "const struct bt_device_node *np, const BT_i8 *name, BT_u32 *lenp",
      "file": "of/bt_of.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "const struct bt_device_node *::const BT_i8 *::BT_u32 *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "void bt_of_get_property": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "const struct bt_device_node *",
          "name": "np",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "BT_u32 *",
          "name": "lenp",
          "comment": ""
        }
      ],
      "argline": "const struct bt_device_node *np, const BT_i8 *name, BT_u32 *lenp",
      "file": "of/bt_of.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "const struct bt_device_node *::const BT_i8 *::BT_u32 *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_n_addr_cells": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "np",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *np",
      "file": "of/bt_of.h",
      "line": 19,
      "lineto": 19,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_n_size_cells": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "np",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *np",
      "file": "of/bt_of.h",
      "line": 20,
      "lineto": 20,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_can_translate_address": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "dev",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *dev",
      "file": "of/bt_of.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_address_to_resource": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "dev",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "index",
          "comment": ""
        },
        {
          "type": "BT_RESOURCE *",
          "name": "r",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *dev, BT_u32 index, BT_RESOURCE *r",
      "file": "of/bt_of.h",
      "line": 23,
      "lineto": 23,
      "comments": "",
      "sig": "struct bt_device_node *::BT_u32::BT_RESOURCE *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "BT_be32 bt_of_get_address": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "dev",
          "comment": ""
        },
        {
          "type": "int",
          "name": "index",
          "comment": ""
        },
        {
          "type": "BT_u64 *",
          "name": "size",
          "comment": ""
        },
        {
          "type": "BT_u32 *",
          "name": "flags",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *dev, int index, BT_u64 *size, BT_u32 *flags",
      "file": "of/bt_of.h",
      "line": 25,
      "lineto": 25,
      "comments": "",
      "sig": "struct bt_device_node *::int::BT_u64 *::BT_u32 *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_is_compatible": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "compat",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device, const BT_i8 *compat",
      "file": "of/bt_of.h",
      "line": 27,
      "lineto": 27,
      "comments": "",
      "sig": "struct bt_device_node *::const BT_i8 *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_device_node bt_of_find_node_by_path": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "path",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *path",
      "file": "of/bt_of.h",
      "line": 29,
      "lineto": 29,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_device_node bt_of_find_node_by_phandle": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "phandle",
          "comment": ""
        }
      ],
      "argline": "BT_u32 phandle",
      "file": "of/bt_of.h",
      "line": 30,
      "lineto": 30,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_integrated_probe": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "node",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *node",
      "file": "of/bt_of.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_integrated_populate": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "root",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *root",
      "file": "of/bt_of.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_integrated_populate_device": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device",
      "file": "of/bt_of.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_unflatten_device_tree": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const void *",
          "name": "fdt",
          "comment": ""
        },
        {
          "type": "struct bt_list_head *",
          "name": "devices",
          "comment": ""
        },
        {
          "type": "struct bt_list_head *",
          "name": "allitems",
          "comment": ""
        }
      ],
      "argline": "const void *fdt, struct bt_list_head *devices, struct bt_list_head *allitems",
      "file": "of/bt_of.h",
      "line": 38,
      "lineto": 38,
      "comments": "",
      "sig": "const void *::struct bt_list_head *::struct bt_list_head *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_init": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "of/bt_of.h",
      "line": 39,
      "lineto": 39,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "inline BT_u64 bt_of_read_number": {
      "description": "",
      "return": {
        "type": "static",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_be32 *",
          "name": "cell",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "size",
          "comment": ""
        }
      ],
      "argline": "const BT_be32 *cell, BT_u32 size",
      "file": "of/bt_of.h",
      "line": 41,
      "lineto": 42,
      "comments": "",
      "sig": "const BT_be32 *::BT_u32",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "struct bt_device_node bt_of_get_bootlogger": {
      "description": "",
      "return": {
        "type": "}*",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "of/bt_of.h",
      "line": 46,
      "lineto": 48,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_device_node bt_of_integrated_get_node": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_DEVICE *",
          "name": "device",
          "comment": ""
        }
      ],
      "argline": "const BT_DEVICE *device",
      "file": "of/bt_of.h",
      "line": 49,
      "lineto": 49,
      "comments": "",
      "sig": "const BT_DEVICE *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_i2c_populate_device": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device",
      "file": "of/bt_of.h",
      "line": 51,
      "lineto": 51,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_spi_populate_device": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device",
      "file": "of/bt_of.h",
      "line": 52,
      "lineto": 52,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "void bt_of_get_mac_address": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device",
      "file": "of/bt_of.h",
      "line": 54,
      "lineto": 54,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_device_node bt_of_mdio_get_node": {
      "description": "",
      "return": {
        "type": "struct*",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device",
      "file": "of/bt_of.h",
      "line": 56,
      "lineto": 56,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "bt_of_mdio_populate_device": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "struct bt_device_node *",
          "name": "device",
          "comment": ""
        }
      ],
      "argline": "struct bt_device_node *device",
      "file": "of/bt_of.h",
      "line": 57,
      "lineto": 57,
      "comments": "",
      "sig": "struct bt_device_node *",
      "rawComments": "",
      "group": "of_bt_of.h"
    },
    "BT_RegisterGpioController": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulBaseGPIO",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulTotalGPIOs",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "hGPIO",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulBaseGPIO, BT_u32 ulTotalGPIOs, BT_HANDLE hGPIO",
      "file": "gpio/bt_gpio.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "BT_u32::BT_u32::BT_HANDLE",
      "rawComments": "",
      "group": "gpio_bt_gpio.h"
    },
    "BT_GpioSet": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulGPIO",
          "comment": ""
        },
        {
          "type": "BT_BOOL",
          "name": "bValue",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulGPIO, BT_BOOL bValue",
      "file": "gpio/bt_gpio.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "BT_u32::BT_BOOL",
      "rawComments": "",
      "group": "gpio_bt_gpio.h"
    },
    "BT_GpioGet": {
      "description": "",
      "return": {
        "type": "BT_BOOL",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulGPIO",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulGPIO, BT_ERROR *pError",
      "file": "gpio/bt_gpio.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "gpio_bt_gpio.h"
    },
    "BT_GpioSetDirection": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulGPIO",
          "comment": ""
        },
        {
          "type": "BT_GPIO_DIRECTION",
          "name": "eDirection",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulGPIO, BT_GPIO_DIRECTION eDirection",
      "file": "gpio/bt_gpio.h",
      "line": 18,
      "lineto": 18,
      "comments": "",
      "sig": "BT_u32::BT_GPIO_DIRECTION",
      "rawComments": "",
      "group": "gpio_bt_gpio.h"
    },
    "BT_GpioGetDirection": {
      "description": "",
      "return": {
        "type": "BT_GPIO_DIRECTION",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulGPIO",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulGPIO, BT_ERROR *pError",
      "file": "gpio/bt_gpio.h",
      "line": 19,
      "lineto": 19,
      "comments": "",
      "sig": "BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "gpio_bt_gpio.h"
    },
    "BT_GpioEnableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulGPIO",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulGPIO",
      "file": "gpio/bt_gpio.h",
      "line": 21,
      "lineto": 21,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "gpio_bt_gpio.h"
    },
    "BT_GpioDisableInterrupt": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulGPIO",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulGPIO",
      "file": "gpio/bt_gpio.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "gpio_bt_gpio.h"
    },
    "BT_RTCRegisterDevice": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hDevice",
          "comment": ""
        },
        {
          "type": "BT_RTC_INFO *",
          "name": "rtc",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hDevice, BT_RTC_INFO *rtc",
      "file": "rtc/bt_rtc.h",
      "line": 16,
      "lineto": 19,
      "comments": "Define the unified API for RTC devices in BitThunder",
      "sig": "BT_HANDLE::BT_RTC_INFO *",
      "rawComments": "Define the unified API for RTC devices in BitThunder",
      "group": "rtc_bt_rtc.h"
    },
    "BT_RTCSetTime": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hRtc",
          "comment": ""
        },
        {
          "type": "struct rtctime *",
          "name": "t",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hRtc, struct rtctime *t",
      "file": "rtc/bt_rtc.h",
      "line": 20,
      "lineto": 20,
      "comments": "",
      "sig": "BT_HANDLE::struct rtctime *",
      "rawComments": "",
      "group": "rtc_bt_rtc.h"
    },
    "BT_RTCGetTime": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hRtc",
          "comment": ""
        },
        {
          "type": "struct rtctime *",
          "name": "t",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hRtc, struct rtctime *t",
      "file": "rtc/bt_rtc.h",
      "line": 21,
      "lineto": 21,
      "comments": "",
      "sig": "BT_HANDLE::struct rtctime *",
      "rawComments": "",
      "group": "rtc_bt_rtc.h"
    },
    "BT_CreateMux": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ulFlags, BT_ERROR *pError",
      "file": "lib/multiplexer.h",
      "line": 4,
      "lineto": 4,
      "comments": "",
      "sig": "BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "lib_multiplexer.h"
    },
    "BT_MuxOpen": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMux",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "path",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMux, const BT_i8 *path",
      "file": "lib/multiplexer.h",
      "line": 5,
      "lineto": 5,
      "comments": "",
      "sig": "BT_HANDLE::const BT_i8 *",
      "rawComments": "",
      "group": "lib_multiplexer.h"
    },
    "BT_MuxAttach": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hMux",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hMux, BT_HANDLE h",
      "file": "lib/multiplexer.h",
      "line": 6,
      "lineto": 6,
      "comments": "",
      "sig": "BT_HANDLE::BT_HANDLE",
      "rawComments": "",
      "group": "lib_multiplexer.h"
    },
    "bcd2bin": {
      "description": "",
      "return": {
        "type": "BT_u8",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u8",
          "name": "val",
          "comment": ""
        }
      ],
      "argline": "BT_u8 val",
      "file": "lib/bcd.h",
      "line": 6,
      "lineto": 6,
      "comments": "",
      "sig": "BT_u8",
      "rawComments": "",
      "group": "lib_bcd.h"
    },
    "bin2bcd": {
      "description": "",
      "return": {
        "type": "BT_u8",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u8",
          "name": "val",
          "comment": ""
        }
      ],
      "argline": "BT_u8 val",
      "file": "lib/bcd.h",
      "line": 7,
      "lineto": 7,
      "comments": "",
      "sig": "BT_u8",
      "rawComments": "",
      "group": "lib_bcd.h"
    },
    "bt_kvprintf": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "char const *",
          "name": "fmt",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "(func",
          "comment": ""
        }
      ],
      "argline": "char const *fmt, void (*func",
      "file": "lib/printf.h",
      "line": 1,
      "lineto": 10,
      "comments": "BitThunder printf replacement and macro override.",
      "sig": "char const *::void *",
      "rawComments": "BitThunder printf replacement and macro override.",
      "group": "lib_printf.h"
    },
    "bt_printf": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "const char *",
          "name": "fmt",
          "comment": ""
        },
        {
          "type": "",
          "name": "...",
          "comment": ""
        }
      ],
      "argline": "const char *fmt, ...",
      "file": "lib/printf.h",
      "line": 11,
      "lineto": 11,
      "comments": "",
      "sig": "const char *::",
      "rawComments": "",
      "group": "lib_printf.h"
    },
    "bt_fprintf": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "stream",
          "comment": ""
        },
        {
          "type": "const char *",
          "name": "fmt",
          "comment": ""
        },
        {
          "type": "",
          "name": "...",
          "comment": ""
        }
      ],
      "argline": "void *stream, const char *fmt, ...",
      "file": "lib/printf.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "void *::const char *::",
      "rawComments": "",
      "group": "lib_printf.h"
    },
    "bt_sprintf": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "char *",
          "name": "s",
          "comment": ""
        },
        {
          "type": "const char *",
          "name": "fmt",
          "comment": ""
        },
        {
          "type": "",
          "name": "...",
          "comment": ""
        }
      ],
      "argline": "char * s, const char *fmt, ...",
      "file": "lib/printf.h",
      "line": 13,
      "lineto": 13,
      "comments": "",
      "sig": "char *::const char *::",
      "rawComments": "",
      "group": "lib_printf.h"
    },
    "BT_SetStdin": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE h",
      "file": "lib/putc.h",
      "line": 1,
      "lineto": 13,
      "comments": "putc.h\n\nCreated on: Mar 16, 2013\nAuthor: wl",
      "sig": "BT_HANDLE",
      "rawComments": "putc.h\n\nCreated on: Mar 16, 2013\nAuthor: wl",
      "group": "lib_putc.h"
    },
    "BT_GetStdin": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "lib/putc.h",
      "line": 14,
      "lineto": 14,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "BT_SetStdout": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE h",
      "file": "lib/putc.h",
      "line": 15,
      "lineto": 15,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "BT_GetStdout": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "lib/putc.h",
      "line": 16,
      "lineto": 16,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "BT_SetStderr": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE h",
      "file": "lib/putc.h",
      "line": 17,
      "lineto": 17,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "BT_GetStderr": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [

      ],
      "argline": "",
      "file": "lib/putc.h",
      "line": 18,
      "lineto": 18,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "bt_getc": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "lib/putc.h",
      "line": 20,
      "lineto": 20,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "bt_fgetc": {
      "description": "",
      "return": {
        "type": "int",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "stream",
          "comment": ""
        }
      ],
      "argline": "void *stream",
      "file": "lib/putc.h",
      "line": 21,
      "lineto": 21,
      "comments": "",
      "sig": "void *",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "bt_putc": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "c",
          "comment": ""
        }
      ],
      "argline": "int c",
      "file": "lib/putc.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "int",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "bt_fputc": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "int",
          "name": "c",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "stream",
          "comment": ""
        }
      ],
      "argline": "int c, void *stream",
      "file": "lib/putc.h",
      "line": 23,
      "lineto": 23,
      "comments": "",
      "sig": "int::void *",
      "rawComments": "",
      "group": "lib_putc.h"
    },
    "bt_cpu_to_le64": {
      "description": "",
      "return": {
        "type": "BT_le64",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "BT_u64",
          "comment": ""
        }
      ],
      "argline": "BT_u64",
      "file": "lib/getmem.h",
      "line": 154,
      "lineto": 154,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_cpu_to_le32": {
      "description": "",
      "return": {
        "type": "BT_le32",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "BT_u32",
          "comment": ""
        }
      ],
      "argline": "BT_u32",
      "file": "lib/getmem.h",
      "line": 155,
      "lineto": 155,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_cpu_to_le16": {
      "description": "",
      "return": {
        "type": "BT_le16",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "BT_u16",
          "comment": ""
        }
      ],
      "argline": "BT_u16",
      "file": "lib/getmem.h",
      "line": 156,
      "lineto": 156,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_le64_to_cpu": {
      "description": "",
      "return": {
        "type": "BT_u64",
        "comment": null
      },
      "args": [
        {
          "type": "BT_le64",
          "name": "u64",
          "comment": ""
        }
      ],
      "argline": "BT_le64 u64",
      "file": "lib/getmem.h",
      "line": 158,
      "lineto": 158,
      "comments": "",
      "sig": "BT_le64",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_le32_to_cpu": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_le32",
          "name": "u32",
          "comment": ""
        }
      ],
      "argline": "BT_le32 u32",
      "file": "lib/getmem.h",
      "line": 159,
      "lineto": 159,
      "comments": "",
      "sig": "BT_le32",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_le16_to_cpu": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_le16",
          "name": "u16",
          "comment": ""
        }
      ],
      "argline": "BT_le16 u16",
      "file": "lib/getmem.h",
      "line": 160,
      "lineto": 160,
      "comments": "",
      "sig": "BT_le16",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_cpu_to_be64": {
      "description": "",
      "return": {
        "type": "BT_be64",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u64",
          "name": "u64",
          "comment": ""
        }
      ],
      "argline": "BT_u64 u64",
      "file": "lib/getmem.h",
      "line": 164,
      "lineto": 164,
      "comments": "",
      "sig": "BT_u64",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_cpu_to_be32": {
      "description": "",
      "return": {
        "type": "BT_be32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "u32",
          "comment": ""
        }
      ],
      "argline": "BT_u32 u32",
      "file": "lib/getmem.h",
      "line": 165,
      "lineto": 165,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_cpu_to_be16": {
      "description": "",
      "return": {
        "type": "BT_be16",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u16",
          "name": "u16",
          "comment": ""
        }
      ],
      "argline": "BT_u16 u16",
      "file": "lib/getmem.h",
      "line": 166,
      "lineto": 166,
      "comments": "",
      "sig": "BT_u16",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_be64_to_cpu": {
      "description": "",
      "return": {
        "type": "BT_u64",
        "comment": null
      },
      "args": [
        {
          "type": "BT_be64",
          "name": "u64",
          "comment": ""
        }
      ],
      "argline": "BT_be64 u64",
      "file": "lib/getmem.h",
      "line": 168,
      "lineto": 168,
      "comments": "",
      "sig": "BT_be64",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_be32_to_cpu": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_be32",
          "name": "u32",
          "comment": ""
        }
      ],
      "argline": "BT_be32 u32",
      "file": "lib/getmem.h",
      "line": 169,
      "lineto": 169,
      "comments": "",
      "sig": "BT_be32",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "bt_be16_to_cpu": {
      "description": "",
      "return": {
        "type": "BT_u16",
        "comment": null
      },
      "args": [
        {
          "type": "BT_be16",
          "name": "u16",
          "comment": ""
        }
      ],
      "argline": "BT_be16 u16",
      "file": "lib/getmem.h",
      "line": 170,
      "lineto": 170,
      "comments": "",
      "sig": "BT_be16",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "BT_GetLongLE": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulOffset",
          "comment": ""
        }
      ],
      "argline": "void *pBuffer, BT_u32 ulOffset",
      "file": "lib/getmem.h",
      "line": 181,
      "lineto": 181,
      "comments": "",
      "sig": "void *::BT_u32",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "BT_GetShortLE": {
      "description": "",
      "return": {
        "type": "BT_u16",
        "comment": null
      },
      "args": [
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulOffset",
          "comment": ""
        }
      ],
      "argline": "void *pBuffer, BT_u32 ulOffset",
      "file": "lib/getmem.h",
      "line": 182,
      "lineto": 182,
      "comments": "",
      "sig": "void *::BT_u32",
      "rawComments": "",
      "group": "lib_getmem.h"
    },
    "BT_EnumerateVolumes": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_BLKDEV_DESCRIPTOR *",
          "name": "blk",
          "comment": ""
        }
      ],
      "argline": "BT_BLKDEV_DESCRIPTOR *blk",
      "file": "volumes/bt_volume.h",
      "line": 6,
      "lineto": 6,
      "comments": "",
      "sig": "BT_BLKDEV_DESCRIPTOR *",
      "rawComments": "",
      "group": "volumes_bt_volume.h"
    },
    "BT_VolumeRead": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hVolume",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulAddress",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulBlocks",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hVolume, BT_u32 ulAddress, BT_u32 ulBlocks, void *pBuffer",
      "file": "volumes/bt_volume.h",
      "line": 7,
      "lineto": 7,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::void *",
      "rawComments": "",
      "group": "volumes_bt_volume.h"
    },
    "BT_VolumeWrite": {
      "description": "",
      "return": {
        "type": "BT_s32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hVolume",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulAddress",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulBlocks",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hVolume, BT_u32 ulAddress, BT_u32 ulBlocks, void *pBuffer",
      "file": "volumes/bt_volume.h",
      "line": 8,
      "lineto": 8,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::BT_u32::void *",
      "rawComments": "",
      "group": "volumes_bt_volume.h"
    },
    "BT_kPrint": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const char *",
          "name": "format",
          "comment": ""
        },
        {
          "type": "",
          "name": "...",
          "comment": ""
        }
      ],
      "argline": "const char *format, ...",
      "file": "syslog/bt_printk.h",
      "line": 1,
      "lineto": 12,
      "comments": "bt_syslog.h\n\nCreated on: Mar 16, 2013\nAuthor: wl",
      "sig": "const char *::",
      "rawComments": "bt_syslog.h\n\nCreated on: Mar 16, 2013\nAuthor: wl",
      "group": "syslog_bt_printk.h"
    },
    "bt_sys_yield": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "syscall/bt_syscall.h",
      "line": 4,
      "lineto": 4,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_getpid": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "void",
          "comment": ""
        }
      ],
      "argline": "void",
      "file": "syscall/bt_syscall.h",
      "line": 5,
      "lineto": 5,
      "comments": "",
      "sig": "",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_open": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "path",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "flags",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *path, BT_u32 flags, BT_ERROR *pError",
      "file": "syscall/bt_syscall.h",
      "line": 6,
      "lineto": 6,
      "comments": "",
      "sig": "const BT_i8 *::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_close": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE h",
      "file": "syscall/bt_syscall.h",
      "line": 7,
      "lineto": 7,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_read": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        },
        {
          "type": "void *",
          "name": "pBuffer",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE h, BT_u32 len, void *pBuffer, BT_ERROR *pError",
      "file": "syscall/bt_syscall.h",
      "line": 8,
      "lineto": 8,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::void *::BT_ERROR *",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_write": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "h",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "len",
          "comment": ""
        },
        {
          "type": "const void *",
          "name": "pBuffer",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE h, BT_u32 len, const void *pBuffer, BT_ERROR *pError",
      "file": "syscall/bt_syscall.h",
      "line": 9,
      "lineto": 9,
      "comments": "",
      "sig": "BT_HANDLE::BT_u32::const void *::BT_ERROR *",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_klog": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "path",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *path",
      "file": "syscall/bt_syscall.h",
      "line": 10,
      "lineto": 10,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_sleep": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "ticks",
          "comment": ""
        }
      ],
      "argline": "BT_u32 ticks",
      "file": "syscall/bt_syscall.h",
      "line": 11,
      "lineto": 11,
      "comments": "",
      "sig": "BT_u32",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "bt_sys_gpioset": {
      "description": "",
      "return": {
        "type": "long",
        "comment": null
      },
      "args": [
        {
          "type": "BT_u32",
          "name": "flag",
          "comment": ""
        },
        {
          "type": "BT_BOOL",
          "name": "state",
          "comment": ""
        }
      ],
      "argline": "BT_u32 flag, BT_BOOL state",
      "file": "syscall/bt_syscall.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "BT_u32::BT_BOOL",
      "rawComments": "",
      "group": "syscall_bt_syscall.h"
    },
    "BT_InitialiseKernelModules": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hLogger",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hLogger",
      "file": "module/bt_module_init.h",
      "line": 12,
      "lineto": 12,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "module_bt_module_init.h"
    },
    "int": {
      "description": "",
      "return": {
        "type": "typedef",
        "comment": null
      },
      "args": [
        {
          "type": "",
          "name": "*BT_SHELL_COMMAND_FN",
          "comment": ""
        }
      ],
      "argline": "*BT_SHELL_COMMAND_FN",
      "file": "shell/bt_shell.h",
      "line": 1,
      "lineto": 10,
      "comments": "BitThunder - Kernel Command Shell",
      "sig": "",
      "rawComments": "BitThunder - Kernel Command Shell",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellCreate": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hStdin",
          "comment": ""
        },
        {
          "type": "BT_HANDLE",
          "name": "hStdout",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "szpPrompt",
          "comment": ""
        },
        {
          "type": "BT_u32",
          "name": "ulFlags",
          "comment": ""
        },
        {
          "type": "BT_ERROR *",
          "name": "pError",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hStdin, BT_HANDLE hStdout, const BT_i8 *szpPrompt, BT_u32 ulFlags, BT_ERROR *pError",
      "file": "shell/bt_shell.h",
      "line": 22,
      "lineto": 22,
      "comments": "",
      "sig": "BT_HANDLE::BT_HANDLE::const BT_i8 *::BT_u32::BT_ERROR *",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellDestroy": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell",
      "file": "shell/bt_shell.h",
      "line": 24,
      "lineto": 24,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellGetStdout": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell",
      "file": "shell/bt_shell.h",
      "line": 26,
      "lineto": 26,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellGetStdin": {
      "description": "",
      "return": {
        "type": "BT_HANDLE",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell",
      "file": "shell/bt_shell.h",
      "line": 28,
      "lineto": 28,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "char BT_ShellGetPrompt": {
      "description": "",
      "return": {
        "type": "const*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell",
      "file": "shell/bt_shell.h",
      "line": 30,
      "lineto": 30,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellUpdatePrompt": {
      "description": "",
      "return": {
        "type": "void",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        },
        {
          "type": "const char *",
          "name": "szpPrompt",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell, const char *szpPrompt",
      "file": "shell/bt_shell.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "BT_HANDLE::const char *",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellGetFlags": {
      "description": "",
      "return": {
        "type": "BT_u32",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell",
      "file": "shell/bt_shell.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_Shell": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell",
      "file": "shell/bt_shell.h",
      "line": 36,
      "lineto": 36,
      "comments": "",
      "sig": "BT_HANDLE",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellCommand": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        },
        {
          "type": "const char *",
          "name": "input",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell, const char *input",
      "file": "shell/bt_shell.h",
      "line": 38,
      "lineto": 38,
      "comments": "",
      "sig": "BT_HANDLE::const char *",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellScript": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "BT_HANDLE",
          "name": "hShell",
          "comment": ""
        },
        {
          "type": "const BT_i8 *",
          "name": "path",
          "comment": ""
        }
      ],
      "argline": "BT_HANDLE hShell, const BT_i8 *path",
      "file": "shell/bt_shell.h",
      "line": 40,
      "lineto": 40,
      "comments": "",
      "sig": "BT_HANDLE::const BT_i8 *",
      "rawComments": "",
      "group": "shell_bt_shell.h"
    },
    "BT_ShellSetEnv": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const char *",
          "name": "name",
          "comment": ""
        },
        {
          "type": "const char *",
          "name": "value",
          "comment": ""
        },
        {
          "type": "BT_ENV_TYPE",
          "name": "eType",
          "comment": ""
        }
      ],
      "argline": "const char *name, const char *value, BT_ENV_TYPE eType",
      "file": "shell/bt_env.h",
      "line": 32,
      "lineto": 32,
      "comments": "",
      "sig": "const char *::const char *::BT_ENV_TYPE",
      "rawComments": "",
      "group": "shell_bt_env.h"
    },
    "BT_ShellGetEnv": {
      "description": "",
      "return": {
        "type": "BT_ENV_VARIABLE*",
        "comment": null
      },
      "args": [
        {
          "type": "const char *",
          "name": "name",
          "comment": ""
        }
      ],
      "argline": "const char *name",
      "file": "shell/bt_env.h",
      "line": 33,
      "lineto": 33,
      "comments": "",
      "sig": "const char *",
      "rawComments": "",
      "group": "shell_bt_env.h"
    },
    "BT_ShellGetStarredEnv": {
      "description": "",
      "return": {
        "type": "BT_ENV_VARIABLE*",
        "comment": null
      },
      "args": [
        {
          "type": "const char *",
          "name": "name",
          "comment": ""
        }
      ],
      "argline": "const char *name",
      "file": "shell/bt_env.h",
      "line": 34,
      "lineto": 34,
      "comments": "",
      "sig": "const char *",
      "rawComments": "",
      "group": "shell_bt_env.h"
    },
    "BT_ShellGetNextEnv": {
      "description": "",
      "return": {
        "type": "BT_ENV_VARIABLE*",
        "comment": null
      },
      "args": [
        {
          "type": "BT_ENV_VARIABLE *",
          "name": "env",
          "comment": ""
        }
      ],
      "argline": "BT_ENV_VARIABLE *env",
      "file": "shell/bt_env.h",
      "line": 35,
      "lineto": 35,
      "comments": "",
      "sig": "BT_ENV_VARIABLE *",
      "rawComments": "",
      "group": "shell_bt_env.h"
    },
    "BT_ExecImageFile": {
      "description": "",
      "return": {
        "type": "BT_ERROR",
        "comment": null
      },
      "args": [
        {
          "type": "const BT_i8 *",
          "name": "szpPath",
          "comment": ""
        }
      ],
      "argline": "const BT_i8 *szpPath",
      "file": "loader/bt_loader.h",
      "line": 23,
      "lineto": 23,
      "comments": "",
      "sig": "const BT_i8 *",
      "rawComments": "",
      "group": "loader_bt_loader.h"
    }
  },
  "globals": {
  },
  "types": [

  ],
  "prefix": "include",
  "groups": [
    [
      "machines_bt_machines.h",
      [
        "",
        "",
        "",
        "BT_GetCpuClockFrequency"
      ]
    ],
    [
      "bt_kernel.h",
      [
        "void",
        "BT_kStartScheduler",
        "BT_kStopScheduler",
        "BT_kTaskCreate",
        "BT_kTaskDelete",
        "BT_kTickCount",
        "BT_kTaskDelay",
        "BT_kTaskDelayUntil",
        "BT_kTaskYield",
        "BT_kGetThreadTag",
        "BT_kSetThreadTag",
        "BT_kMutexCreate",
        "BT_kRecursiveMutexCreate",
        "BT_kMutexDestroy",
        "BT_kMutexPend",
        "BT_kMutexRelease",
        "BT_kMutexPendRecursive",
        "BT_kMutexReleaseRecursive",
        "BT_kMutexReleaseFromISR",
        "BT_kQueueCreate",
        "BT_kQueueDestroy",
        "BT_kQueueSend",
        "BT_kQueueSendFromISR",
        "BT_kQueueSendToFront",
        "BT_kQueueSendToBack",
        "BT_kQueueReceive",
        "BT_kQueueReceiveFromISR",
        "BT_kQueueMessagesWaiting",
        "BT_kEnterCritical",
        "BT_kExitCritical",
        "bt_get_kernel_params"
      ]
    ],
    [
      "bitthunder.lds.h",
      [
        "= ALIGN",
        "= ALIGN",
        "= __sdata_start +",
        "= __sdata2_start +",
        "= ALIGN",
        "= ALIGN",
        "= ALIGN",
        "= ALIGN",
        "= ALIGN"
      ]
    ],
    [
      "process_bt_queue.h",
      [
        "BT_CreateQueue",
        "BT_QueueSend",
        "BT_QueueSendFromISR",
        "BT_QueueSendToBack",
        "BT_QueueSendToFront",
        "BT_QueueReceive",
        "BT_QueueReceiveFromISR",
        "BT_QueueMessagesWaiting"
      ]
    ],
    [
      "process_bt_threads.h",
      [
        "BT_ERROR",
        "BT_CreateThread",
        "BT_CreateProcessThread",
        "BT_GetThreadHandle",
        "BT_GetThreadProcessHandle",
        "BT_ThreadSleepUntil",
        "BT_ThreadSleep",
        "BT_ThreadYield",
        "BT_GetThreadTag",
        "BT_SetThreadTag"
      ]
    ],
    [
      "process_bt_mutex.h",
      [
        "BT_CreateMutex",
        "BT_PendMutex",
        "BT_ReleaseMutex",
        "BT_PendMutexRecursive",
        "BT_ReleaseMutexRecursive",
        "BT_ReleaseMutexFromISR"
      ]
    ],
    [
      "process_bt_process.h",
      [
        "BT_CreateProcess",
        "BT_GetProcessHandle",
        "BT_GetKernelProcessHandle",
        "BT_GetParentProcessHandle",
        "bt_task BT_GetProcessTask",
        "BT_GetProcessTime",
        "BT_GetTotalProcesses",
        "BT_AllocFileDescriptor",
        "BT_FreeFileDescriptor",
        "BT_SetFileDescriptor",
        "BT_GetFileDescriptor",
        "BT_SetProcessFileDescriptor",
        "BT_GetProcessFileDescriptor",
        "bt_process_init"
      ]
    ],
    [
      "bt_time.h",
      [

      ]
    ],
    [
      "timers_bt_timers.h",
      [
        "BT_SetSystemTimerHandle",
        "BT_SetGlobalTimerHandle",
        "BT_GetSystemTimerOffset",
        "BT_StopSystemTimer",
        "BT_GetGlobalTimer",
        "BT_GetGlobalTimerRate",
        "BT_GetKernelTime",
        "BT_GetKernelTick"
      ]
    ],
    [
      "mm_bt_vm.h",
      [
        "bt_vm_init",
        "bt_vm_map bt_vm_create",
        "bt_vm_destroy",
        "bt_vm_map bt_vm_get_kernel_map",
        "bt_vm_translate",
        "bt_vm_map_region",
        "bt_vm_unmap_region",
        "bt_vm_allocate",
        "bt_vm_free",
        "bt_pgd_t bt_mmu_newmap",
        "void bt_mmu_terminate",
        "void bt_mmu_switch",
        "void bt_mmu_flush_tlb",
        "bt_paddr_t bt_mmu_extract",
        "void bt_mmu_init",
        "void bt_mmu_killmap",
        "int bt_mmu_map",
        "bt_pgd_t bt_mmu_get_kernel_pgd",
        "bt_mmu_set_section"
      ]
    ],
    [
      "mm_bt_heap.h",
      [
        "BT_kMalloc",
        "BT_kFree"
      ]
    ],
    [
      "mm_bt_ioremap.h",
      [
        "bt_ioremap",
        "bt_iounmap"
      ]
    ],
    [
      "mm_bt_page.h",
      [
        "bt_page_alloc",
        "bt_page_alloc_aligned",
        "bt_page_free",
        "bt_page_reserve",
        "bt_page_alloc_coherent",
        "bt_page_free_coherent",
        "bt_page_reserve_coherent",
        "bt_page_info",
        "bt_page_pool_init",
        "bt_page_pool_alloc",
        "bt_page_pool_free",
        "bt_page_pool_attach",
        "bt_page_pool_reserve",
        "bt_initialise_pages",
        "bt_initialise_pages_second_stage",
        "bt_initialise_coherent_pages"
      ]
    ],
    [
      "mm_slab.h",
      [
        "bt_slab_info",
        "bt_initialise_slab",
        "bt_initialise_slab_second_stage",
        "BT_CacheInit",
        "BT_CacheAlloc",
        "BT_CacheFree"
      ]
    ],
    [
      "mm_bt_mm.h",
      [

      ]
    ],
    [
      "devman_bt_device.h",
      [
        "BT_GetTotalDevicesByType",
        "BT_DEVICE    BT_GetDeviceByType",
        "BT_RESOURCE  BT_GetDeviceResource"
      ]
    ],
    [
      "devman_bt_mtd.h",
      [
        "mtd_erase_callback",
        "BT_MTD_RegisterDevice",
        "BT_MTD_Erase",
        "BT_MTD_Read",
        "BT_MTD_Write",
        "BT_MTD_GetUserInfo"
      ]
    ],
    [
      "devman_bt_block.h",
      [
        "BT_RegisterBlockDevice",
        "BT_BlockRead",
        "BT_BlockWrite",
        "BT_GetBlockGeometry",
        "BT_BlockGetInode"
      ]
    ],
    [
      "devman_bt_resource.h",
      [
        "BT_RESOURCE BT_GetResource"
      ]
    ],
    [
      "devman_bt_i2c.h",
      [
        "BT_I2C_RegisterBus",
        "BT_I2C_GetBusByID",
        "BT_I2C_GetBusObject"
      ]
    ],
    [
      "devman_bt_devman.h",
      [
        "const BT_IF_HANDLE \t   ",
        "BT_ERROR",
        "BT_GetMachineDescription",
        "BT_GetTotalIntegratedDriversByType",
        "BT_GetIntegratedDriverByType",
        "BT_ProbeIntegratedDevices"
      ]
    ],
    [
      "devman_bt_integrated_device.h",
      [
        "BT_RESOURCE BT_GetIntegratedResource"
      ]
    ],
    [
      "devman_bt_driver.h",
      [
        "eType;\t\t\t\t\t\t\t union { BT_HANDLE",
        "",
        "",
        ""
      ]
    ],
    [
      "devman_bt_integrated_driver.h",
      [

      ]
    ],
    [
      "interfaces_bt_if_file.h",
      [
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_uart.h",
      [
        "struct { BT_ERROR",
        "",
        "",
        "",
        "",
        "BT_UartSetBaudrate",
        "BT_UartSetConfiguration",
        "BT_UartGetConfiguration",
        "BT_UartEnable",
        "BT_UartDisable"
      ]
    ],
    [
      "interfaces_bt_dev_if_pwm.h",
      [
        "struct _BT_DEV_IF_PWM { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_PwmStart",
        "BT_PwmStop",
        "BT_PwmSetConfiguration",
        "BT_PwmGetConfiguration",
        "BT_PwmGetPeriodCount",
        "BT_PwmSetFrequency",
        "BT_PwmGetFrequency",
        "BT_PwmGetDutyCylce",
        "BT_PwmSetDutyCycle",
        "BT_PwmGetDeadTime",
        "BT_PwmSetDeadTime"
      ]
    ],
    [
      "interfaces_bt_dev_if_adc.h",
      [
        "void",
        "struct _BT_DEV_IF_ADC { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_AdcStart",
        "BT_AdcStop",
        "BT_AdcSetConfiguration",
        "BT_AdcGetConfiguration",
        "BT_AdcRegisterCallback",
        "BT_AdcUnregisterCallback",
        "BT_AdcRead"
      ]
    ],
    [
      "interfaces_bt_if_dir.h",
      [
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_gpio.h",
      [
        "struct _BT_DEV_IF_GPIO { BT_ERROR",
        "",
        "",
        "",
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_if_block.h",
      [
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_rtc.h",
      [
        "struct _BT_DEV_IF_RTC { BT_ERROR",
        ""
      ]
    ],
    [
      "interfaces_bt_if_device.h",
      [

      ]
    ],
    [
      "interfaces_bt_dev_if_spi.h",
      [
        "",
        "struct { BT_ERROR",
        "",
        "BT_SpiRegisterMaster",
        "BT_SpiMessageInit",
        "BT_SpiMessageAddTail",
        "BT_SpiTransferDel",
        "BT_SpiSetup",
        "BT_SpiSync",
        "BT_SpiBusLock",
        "BT_SpiBusUnlock",
        "BT_SpiWrite",
        "BT_SpiRead",
        "BT_SpiWriteThenRead"
      ]
    ],
    [
      "interfaces_bt_dev_if_qei.h",
      [
        "void",
        "struct _BT_DEV_IF_QEI { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_QEISetConfiguration",
        "BT_QEIGetConfiguration",
        "BT_QEIGetIndexCount",
        "BT_QEIGetPosition",
        "BT_QEISetMaximumPosition",
        "BT_QEISetPositionComparator",
        "BT_QEIGetVelocity",
        "BT_QEIEnableInterrupt",
        "BT_QEIDisableInterrupt",
        "BT_QEIClearInterrupt",
        "BT_QEIRegisterCallback",
        "BT_QEIUnregisterCallback"
      ]
    ],
    [
      "interfaces_bt_if_fs.h",
      [
        "{ BT_HANDLE",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_mcpwm.h",
      [
        "struct _BT_DEV_IF_MCPWM { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_MCPwmStart",
        "BT_MCPwmStop",
        "BT_MCPwmSetConfiguration",
        "BT_MCPwmGetConfiguration",
        "BT_MCPwmGetChannelConfig",
        "BT_MCPwmSetChannelConfig",
        "BT_MCPwmGetChannelPulsewidth",
        "BT_MCPwmSetChannelPulsewidth",
        "BT_MCPwmSetDCModePattern"
      ]
    ],
    [
      "interfaces_bt_if_power.h",
      [
        "",
        "",
        "BT_SetPowerState",
        "BT_GetPowerState"
      ]
    ],
    [
      "interfaces_bt_if_cpu.h",
      [
        "BT_GetCoreID",
        "BT_GetTotalCores",
        "BT_BootCore",
        "BT_DCacheEnable",
        "BT_DCacheDisable",
        "BT_DCacheFlush",
        "BT_DCacheFlushLine",
        "BT_DCacheFlushRange",
        "BT_DCacheInvalidate",
        "BT_DCacheInvalidateLine",
        "BT_DCacheInvalidateRange",
        "BT_ICacheEnable",
        "BT_ICacheDisable",
        "BT_ICacheInvalidate"
      ]
    ],
    [
      "interfaces_bt_dev_if_i2c.h",
      [
        "BT_I2C_FUNC_SMBUS_WRITE_BYTE_DATA) BT_I2C_FUNC_SMBUS_WRITE_WORD_DATA) BT_I2C_FUNC_SMBUS_WRITE_BLOCK_DATA) BT_I2C_FUNC_SMBUS_WRITE_I2C_BLOCK) BT_I2C_FUNC_SMBUS_BYTE | \\ BT_I2C_FUNC_SMBUS_BYTE_DATA | \\ BT_I2C_FUNC_SMBUS_WORD_DATA | \\ BT_I2C_FUNC_SMBUS_PROC_CALL | \\ BT_I2C_FUNC_SMBUS_WRITE_BLOCK_DATA | \\ BT_I2C_FUNC_SMBUS_I2C_BLOCK | \\ BT_I2C_FUNC_SMBUS_PEC) BT_u32",
        "BT_I2C_Transfer",
        "BT_I2C_MasterSend",
        "BT_I2C_MasterReceive"
      ]
    ],
    [
      "interfaces_bt_dev_if_can.h",
      [
        "struct { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_CanSetBaudrate",
        "BT_CanSetConfiguration",
        "BT_CanGetConfiguration",
        "BT_CanEnable",
        "BT_CanDisable",
        "BT_CanSendMessage",
        "BT_CanReadMessage"
      ]
    ],
    [
      "interfaces_bt_if_chardev.h",
      [
        "",
        "",
        "",
        "",
        "",
        "BT_CharDeviceRead",
        "BT_CharDeviceWrite",
        "BT_CharDeviceFlush"
      ]
    ],
    [
      "interfaces_bt_dev_if_timer.h",
      [
        "void",
        "struct _BT_DEV_IF_TIMER { BT_u32",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_TimerStart",
        "BT_TimerStop",
        "BT_TimerSetConfiguration",
        "BT_TimerGetConfiguration",
        "BT_TimerEnableInterrupt",
        "BT_TimerDisableInterrupt",
        "BT_TimerRegisterCallback",
        "BT_TimerUnregisterCallback",
        "BT_TimerGetPrescaler",
        "BT_TimerSetPrescaler",
        "BT_TimerGetPeriodCount",
        "BT_TimerSetPeriodCount",
        "BT_TimerSetFrequency",
        "BT_TimerGetFrequency",
        "BT_TimerEnableReload",
        "BT_TimerDisableReload",
        "BT_TimerGetValue",
        "BT_TimerSetValue",
        "BT_TimerExpired"
      ]
    ],
    [
      "interfaces_bt_dev_if_systimer.h",
      [
        "struct _BT_DEV_IF_SYSTIMER { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_sdio.h",
      [
        "struct _BT_DEV_IF_SDIO { BT_ERROR"
      ]
    ],
    [
      "interfaces_bt_dev_if_irq.h",
      [
        "struct _BT_DEV_IF_IRQ { BT_ERROR",
        "",
        "BT_i8 ",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_mtd.h",
      [
        "",
        "struct { BT_ERROR",
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_dac.h",
      [
        "void",
        "struct _BT_DEV_IF_DAC { BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "BT_DacStart",
        "BT_DacStop",
        "BT_DacSetConfiguration",
        "BT_DacGetConfiguration",
        "BT_DacRegisterCallback",
        "BT_DacUnregisterCallback",
        "BT_DacWrite"
      ]
    ],
    [
      "interfaces_bt_dev_if_gtimer.h",
      [
        "struct _BT_DEV_IF_GTIMER { BT_u32",
        ""
      ]
    ],
    [
      "interfaces_bt_dev_if_emac.h",
      [
        "void",
        "ulCapabilities;\t\t\t BT_ERROR",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "",
        "struct _BT_DEV_IF_MII { BT_u16",
        "",
        "",
        "struct BT_DEV_IF_PHY { BT_ERROR",
        "",
        ""
      ]
    ],
    [
      "interfaces_bt_if_inode.h",
      [
        ""
      ]
    ],
    [
      "interrupts_bt_tasklets.h",
      [
        "void",
        "BT_TaskletSchedule",
        "BT_TaskletHighSchedule"
      ]
    ],
    [
      "interrupts_bt_interrupts.h",
      [
        "BT_ERROR",
        "BT_RegisterInterruptController",
        "BT_RegisterInterrupt",
        "BT_SetInterruptLabel",
        "BT_i8 BT_GetInterruptLabel",
        "BT_InterruptRegistered",
        "BT_UnregisterInterrupt",
        "BT_SetInterruptPriority",
        "BT_GetInterruptPriority",
        "BT_EnableInterrupt",
        "BT_DisableInterrupt",
        "BT_GetInterruptCount",
        "BT_EnableInterrupts",
        "BT_DisableInterrupts",
        "BT_GetInterruptCount",
        "BT_SetInterruptAffinity"
      ]
    ],
    [
      "interrupts_bt_softirq.h",
      [
        "void",
        "BT_OpenSoftIRQ",
        "BT_RaiseSoftIRQ",
        "BT_RaiseSoftIRQFromISR"
      ]
    ],
    [
      "helpers_bt_bitops.h",
      [
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "1UL &",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        "",
        "mask = BT_BIT_MASK",
        "p =",
        ""
      ]
    ],
    [
      "helpers_bt_clkdiv.h",
      [
        "BT_CalculateClockDivider"
      ]
    ],
    [
      "bt_export.h",
      [

      ]
    ],
    [
      "fs_fullfat_ff.config.h",
      [

      ]
    ],
    [
      "fs_bt_dir.h",
      [
        "BT_ReadDir"
      ]
    ],
    [
      "fs_bt_inode.h",
      [
        "BT_ReadInode"
      ]
    ],
    [
      "fs_bt_file.h",
      [
        "BT_Read",
        "BT_Write",
        "BT_GetC",
        "BT_PutC",
        "BT_Seek",
        "BT_Tell",
        "BT_GetS",
        "BT_Flush",
        "BT_EOF"
      ]
    ],
    [
      "fs_bt_devfs.h",
      [
        "",
        "BT_DeviceOpen",
        "BT_DeviceRegister",
        "BT_GetInodeName"
      ]
    ],
    [
      "fs_bt_fs.h",
      [
        "BT_RegisterFilesystem",
        "BT_GetModeFlags",
        "BT_Open",
        "BT_Mount",
        "BT_MkDir",
        "BT_RmDir",
        "BT_OpenDir",
        "BT_GetInode",
        "BT_Remove",
        "BT_Unlink",
        "BT_Rename",
        "BT_GetCwd",
        "BT_ChDir"
      ]
    ],
    [
      "net_bt_lwip.h",
      [
        "bt_lwip_netif_init",
        "bt_lwip_process",
        "bt_lwip_netif_up",
        "bt_lwip_netif_down",
        "bt_lwip_netif_set_addr",
        "bt_lwip_netif_get_addr",
        "bt_lwip_netif_dhcp_done",
        "bt_lwip_netif_get_hostname"
      ]
    ],
    [
      "net_lwip_lwipopts.h",
      [

      ]
    ],
    [
      "net_lwip_arch_cc.h",
      [

      ]
    ],
    [
      "net_lwip_arch_perf.h",
      [

      ]
    ],
    [
      "net_lwip_arch_sys_arch.h",
      [

      ]
    ],
    [
      "net_bt_net.h",
      [
        "BT_RegisterNetworkInterface",
        "BT_isNetworkingReady",
        "BT_GetTotalNetworkInterfaces",
        "BT_GetNetif",
        "BT_GetNetifFromHandle",
        "BT_GetNetifByIndex",
        "BT_NetifGetMacAddress",
        "BT_NetifSetMacAddress",
        "BT_NetifSetAddress",
        "BT_NetifGetAddress",
        "BT_NetifConfigureLink",
        "BT_NetifRestartLink",
        "BT_NetifGetLinkState",
        "BT_StartNetif",
        "BT_StopNetif",
        "BT_NetifGetHostname",
        "bt_netif_adjust_link"
      ]
    ],
    [
      "net_bt_phy.h",
      [
        "BT_RegisterMiiBus",
        "BT_ConnectPHY",
        "bt_phy_read",
        "bt_phy_write",
        "bt_phy_generic_init",
        "bt_phy_generic_read_status"
      ]
    ],
    [
      "net_bt_sockets.h",
      [
        "accept",
        "bind",
        "shutdown",
        "getpeername",
        "getsockname",
        "getsockopt",
        "setsockopt",
        "close",
        "connect",
        "listen",
        "recv",
        "read",
        "send",
        "socket",
        "closesocket",
        "write",
        "ioctl",
        "fcntl"
      ]
    ],
    [
      "of_bt_of_irq.h",
      [
        "bt_of_irq_count",
        "bt_of_irq_to_resource_table"
      ]
    ],
    [
      "of_bt_of.h",
      [
        "void bt_of_get_fdt",
        "bt_device_node bt_of_node_get",
        "bt_of_node_put",
        "bt_device_node bt_of_get_parent",
        "bt_device_property bt_of_find_property",
        "void bt_of_get_property",
        "bt_of_n_addr_cells",
        "bt_of_n_size_cells",
        "bt_of_can_translate_address",
        "bt_of_address_to_resource",
        "BT_be32 bt_of_get_address",
        "bt_of_is_compatible",
        "bt_device_node bt_of_find_node_by_path",
        "bt_device_node bt_of_find_node_by_phandle",
        "bt_of_integrated_probe",
        "bt_of_integrated_populate",
        "bt_of_integrated_populate_device",
        "bt_of_unflatten_device_tree",
        "bt_of_init",
        "inline BT_u64 bt_of_read_number",
        "",
        "struct bt_device_node bt_of_get_bootlogger",
        "bt_device_node bt_of_integrated_get_node",
        "bt_of_i2c_populate_device",
        "bt_of_spi_populate_device",
        "void bt_of_get_mac_address",
        "bt_device_node bt_of_mdio_get_node",
        "bt_of_mdio_populate_device"
      ]
    ],
    [
      "gpio_bt_gpio.h",
      [
        "BT_RegisterGpioController",
        "BT_GpioSet",
        "BT_GpioGet",
        "BT_GpioSetDirection",
        "BT_GpioGetDirection",
        "BT_GpioEnableInterrupt",
        "BT_GpioDisableInterrupt"
      ]
    ],
    [
      "rtc_bt_rtc.h",
      [
        "BT_RTCRegisterDevice",
        "BT_RTCSetTime",
        "BT_RTCGetTime"
      ]
    ],
    [
      "lib_multiplexer.h",
      [
        "BT_CreateMux",
        "BT_MuxOpen",
        "BT_MuxAttach"
      ]
    ],
    [
      "lib_bcd.h",
      [
        "bcd2bin",
        "bin2bcd"
      ]
    ],
    [
      "lib_printf.h",
      [
        "bt_kvprintf",
        "bt_printf",
        "bt_fprintf",
        "bt_sprintf"
      ]
    ],
    [
      "lib_ctype.h",
      [

      ]
    ],
    [
      "lib_putc.h",
      [
        "BT_SetStdin",
        "BT_GetStdin",
        "BT_SetStdout",
        "BT_GetStdout",
        "BT_SetStderr",
        "BT_GetStderr",
        "bt_getc",
        "bt_fgetc",
        "bt_putc",
        "bt_fputc"
      ]
    ],
    [
      "lib_getmem.h",
      [
        "bt_cpu_to_le64",
        "bt_cpu_to_le32",
        "bt_cpu_to_le16",
        "bt_le64_to_cpu",
        "bt_le32_to_cpu",
        "bt_le16_to_cpu",
        "bt_cpu_to_be64",
        "bt_cpu_to_be32",
        "bt_cpu_to_be16",
        "bt_be64_to_cpu",
        "bt_be32_to_cpu",
        "bt_be16_to_cpu",
        "BT_GetLongLE",
        "BT_GetShortLE"
      ]
    ],
    [
      "volumes_bt_volume.h",
      [
        "BT_EnumerateVolumes",
        "BT_VolumeRead",
        "BT_VolumeWrite"
      ]
    ],
    [
      "syslog_bt_printk.h",
      [
        "BT_kPrint"
      ]
    ],
    [
      "syscall_bt_syscall.h",
      [
        "bt_sys_yield",
        "bt_sys_getpid",
        "bt_sys_open",
        "bt_sys_close",
        "bt_sys_read",
        "bt_sys_write",
        "bt_sys_klog",
        "bt_sys_sleep",
        "bt_sys_gpioset"
      ]
    ],
    [
      "btlinker_config.h",
      [

      ]
    ],
    [
      "bt_os.h",
      [

      ]
    ],
    [
      "module_bt_module_init.h",
      [
        "",
        "BT_InitialiseKernelModules"
      ]
    ],
    [
      "shell_bt_shell.h",
      [
        "int",
        "BT_ShellCreate",
        "BT_ShellDestroy",
        "BT_ShellGetStdout",
        "BT_ShellGetStdin",
        "char BT_ShellGetPrompt",
        "BT_ShellUpdatePrompt",
        "BT_ShellGetFlags",
        "BT_Shell",
        "BT_ShellCommand",
        "BT_ShellScript"
      ]
    ],
    [
      "shell_bt_env.h",
      [
        "BT_ShellSetEnv",
        "BT_ShellGetEnv",
        "BT_ShellGetStarredEnv",
        "BT_ShellGetNextEnv"
      ]
    ],
    [
      "loader_bt_elf.h",
      [
        "void"
      ]
    ],
    [
      "loader_elf.h",
      [

      ]
    ],
    [
      "loader_bt_loader.h",
      [
        "void",
        "",
        "",
        "BT_ExecImageFile"
      ]
    ]
  ],
  "examples": null
}